<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>知识</title>
      <link href="/2017/05/21/%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/05/21/%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="达尔文理论"><a href="#达尔文理论" class="headerlink" title="达尔文理论"></a>达尔文理论</h1><p>在学知识的过程中有一个现象，就是有的概念，你初次遇到的时候他平凡武器好像很容易就能把握它的含义。但是随着生活阅历越来越多，你经常会对他有新的领会。</p><p>比如说我们最初是在中学的生物课上接触的达尔文的进化论。但是读书越多，我就越知道进化论哪里只是什么生物学知识来，他简直是理解整个世界的一个角度。</p><p>还有像数学中的概率论物理中的量子论都是这样的概念。正如万维刚老师说的所谓的新思想并不一定是离我们很远的。</p><p>前言私下我们平时习以为常的那些观念都在不断被刷新。比如说吧，什么事贫穷，最开始他只是指没钱吗，后来我们又知道贫穷是一种思维模式。但是最近又有人指出啊，贫穷还是一种可以遗传的生理疾病呗</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>2016 摘抄</title>
      <link href="/2016/11/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016%20%E6%91%98%E6%8A%84/"/>
      <url>/2016/11/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2016%20%E6%91%98%E6%8A%84/</url>
      <content type="html"><![CDATA[<p>People like to take a side and be proud of their choices. The easiest and less brain intensive way to show their superiority is by hating the alternatives.</p><h1 id="爱过和文革"><a href="#爱过和文革" class="headerlink" title="爱过和文革"></a>爱过和文革</h1><p>我来说几个有爱国之心的人。</p><p>第一个，胡适的儿子胡思杜，不愿意和父母一起去台湾，把父母给的财产全部捐给国家，结局请百度。<br>第二个，傅作义的堂弟傅作恭，美国哥伦比亚大学水利工程学博士，回国来报效祖国，结局请百度。<br>第三个，舒庆春（老舍），北平和平解放的重要人物之一，结局请百度。<br>第四个，田汉（国歌作者），早年留学日本，为了建设祖国回到国内，结局请百度。</p><p>我猜李嘉诚不过是不想当第五个才把资产卖掉而已</p><h1 id="一次关于心灵的对话"><a href="#一次关于心灵的对话" class="headerlink" title="一次关于心灵的对话"></a>一次关于心灵的对话</h1><p>慢慢来，让灵魂跟上来。</p><p>你只负责精彩，老天自有安排。</p><p>在最深的绝望里，遇见最美的意外。</p><p>只愿你被这世界温柔相待……</p><h1 id="中国的超级富豪"><a href="#中国的超级富豪" class="headerlink" title="中国的超级富豪"></a>中国的超级富豪</h1><p>报告显示，个人财富至少为人民币1000万元的中国人在2012年达到105万，较上年增加了3%。那些财富至少为1亿元的“超级富豪”2012年增至64500人，增幅2%。</p><p>报告显示，中国富人平均拥有财富5900万元，去年他们的支出占其财富的比重为3%，其中很多花在了旅行上。</p><p>2013年9月10日――尽管经济形势和地缘政治的诸多不确定因素持续存在，2013年世界超富人群数量达到了空前的199,235人，总计共拥有约28万亿美元的财富。超富人群数量与去年相比增幅超过6%，财富总值增长了2万亿美元，超过了印度的GDP。</p><p>Wealth-X与瑞银于今日联合发布的《2013世界超级财富报告》称，全球亿万富豪人数已超过2000人，净值总额达6.5万亿美元，相当于世界超高净值（UHNW）总额的23%。尽管该部分人群只占全球超高净值人口的1%，其净值总额却远远超过了其他任何财富阶层。报告将总资产达到3000万美元及以上的个人定义为超高净值人群。该报告中的其它重要结论：</p><p>全球超高净值人群数量的增长很大程度上归功于北美和欧洲，这两个地区的超高净值人数增长近1万人，财富共计增加1.5万亿美元。</p><h1 id="中国制造业"><a href="#中国制造业" class="headerlink" title="中国制造业"></a>中国制造业</h1><p>“不知道你怎么看中国的产业升级，你可能觉得‘很重要’，但我们看到的是‘生死存亡’。”昆仑数据CEO陆薇说。</p><p>过去十年之间，中国平均工资翻了三倍，美国仅上升了27%；中国的工业用电成本上升66%，天然气成本则猛增138%——照此趋势发展，中国的制造业成本很快会超过美国。</p>]]></content>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Modern Art and Ideas (Week 1), Art Periods</title>
      <link href="/2016/07/31/%E8%89%BA%E6%9C%AF/Modern%20Art%202/"/>
      <url>/2016/07/31/%E8%89%BA%E6%9C%AF/Modern%20Art%202/</url>
      <content type="html"><![CDATA[<p>A course by <a href="https://www.coursera.org/learn/modern-art-ideas" target="_blank" rel="noopener">MoMA and Coursera</a></p><h1 id="Art-period"><a href="#Art-period" class="headerlink" title="Art period"></a>Art period</h1><p>An art period is a phase in the development of the <strong>work of an artist, a group or art movement</strong>, from <a href="https://en.wikipedia.org/wiki/Art_periods" target="_blank" rel="noopener">Wikipedia</a></p><ol><li><p>Renaissance<br> 1300 - 1602</p></li><li><p>Renaissance to Neoclassicism (新古典主义)<br> 1520 - 1830</p></li><li><p>Romanticism<br> 1979 - 1880</p></li><li><p>Romanticism to Modern Art<br> 1803 - 1854</p></li><li><p>Modern Art<br> 1860 - 1945</p></li><li><p>Contemporary art<br> 1946 - present</p></li></ol><h1 id="Modern-Art-timeline"><a href="#Modern-Art-timeline" class="headerlink" title="Modern Art timeline"></a>Modern Art timeline</h1><ol><li><p>IMPRESSIONISM<br>(C.1870-1890)</p></li><li><p>POST IMPRESSIONISM<br>(C.1885-1905)</p></li><li><p>FAUVISM<br>(1905-1910)</p></li><li><p>GERMAN EXPRESSIONISM<br>(1905-1925)</p></li><li><p>ABSTRACT ART<br>(C.1907 ONWARDS)</p></li><li><p>CUBISM<br>(1907-1915)</p></li><li><p>FUTURISM<br>(1909-1914)</p></li><li><p>SUPREMATISM<br>(C.1915-1925)</p></li><li><p>CONSTRUCTIVISM<br>(C.1913-1930)</p></li><li><p>DE STIJL<br>(C.1917-1931)</p></li></ol><h2 id="IMPRESSIONISM-C-1870-1890"><a href="#IMPRESSIONISM-C-1870-1890" class="headerlink" title="IMPRESSIONISM (C.1870-1890)"></a>IMPRESSIONISM (C.1870-1890)</h2><p>a colorful style of painting in France</p><p>searched for a more exact <strong>analysis of the effects of color and light</strong> in nature. </p><p>capture the atmosphere of <strong>a particular time of day</strong> (or different weather)</p><p><img src="/images/modern_art_history/moma-1-monet.jpg" alt="CLAUDE MONET (1840-1926) &#39;Rouen Cathedral in Full Sunlight&#39;, 1893-94 (oil on canvas)"></p><h3 id="Artists"><a href="#Artists" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Claude Monet</strong>, Pierre Auguste Renoir 雷诺阿, Edgar Degas 德加, Camille Pissarro 毕沙罗, Alfred Sisley 西斯莱, Henri de Toulouse Lautrec 罗特列克</p><h2 id="POST-IMPRESSIONISM-C-1885-1905"><a href="#POST-IMPRESSIONISM-C-1885-1905" class="headerlink" title="POST IMPRESSIONISM (C.1885-1905)"></a>POST IMPRESSIONISM (C.1885-1905)</h2><p><strong>not a particular style</strong>, but a collective title given to a few artists </p><p>developed a range of <strong>personal styles</strong>, influenced the development of art in the 20th century</p><p><img src="/images/modern_art_history/moma-1-vangogh.jpg" alt="VINCENT VAN GOGH (1853-90)&#39;Café Terrace at Night&#39;, 1888 (oil on canvas)"></p><blockquote><p><strong>Cézanne</strong> was an important influence on <strong>Picasso</strong> and Braque in their development of <strong>Cubism</strong>. </p></blockquote><blockquote><p><strong>Van Gogh’s vigorous and vibrant painting</strong> technique was one of the touchstones of both <strong>Fauvism and Expressionism</strong></p></blockquote><blockquote><p><strong>Gauguin’s symbolic color</strong> and Seurat’s pointillist technique were an inspiration to ‘Les Fauves’ 野兽派.</p></blockquote><p><img src="/images/modern_art_history/moma-1-cezanne.png" alt="Paul Cézanne, Apples and Oranges (1899)"></p><h3 id="Artists-1"><a href="#Artists-1" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Paul Cézanne 塞尚</strong>, Paul Gauguin 高更, <strong>Vincent Van Gogh</strong>, Georges Seurat 修拉</p><h2 id="FAUVISM-野兽派-1905-1910"><a href="#FAUVISM-野兽派-1905-1910" class="headerlink" title="FAUVISM 野兽派 (1905-1910)"></a>FAUVISM 野兽派 (1905-1910)</h2><p>Developed in France at the beginning of the 20th century by <strong>Henri Matisse</strong>, André Derain</p><p><strong>joyful style</strong> of painting that delighted in using <strong>outrageously bold colors</strong>, color be used at its highest pitch to express the artist’s feelings (rather than describe what it looks like)</p><ol><li><strong>extremely simplified</strong> drawing</li><li>intensely <strong>exaggerated color</strong></li><li>a major influence on <strong>German Expressionism</strong></li></ol><p><img src="/images/modern_art_history/moma-1-matisse.jpg" alt="HENRI MATISSE (1869-1954)&#39;The Open Window, Collioure&#39;, 1905 (oil on canvas)"></p><h3 id="Artists-2"><a href="#Artists-2" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Henri Matisse 马蒂斯</strong>, André Derain 德兰</p><h2 id="GERMAN-EXPRESSIONISM-德国表现主义-1905-1925"><a href="#GERMAN-EXPRESSIONISM-德国表现主义-1905-1925" class="headerlink" title="GERMAN EXPRESSIONISM 德国表现主义 (1905-1925)"></a>GERMAN EXPRESSIONISM 德国表现主义 (1905-1925)</h2><p>an <strong>emotional or spiritual vision</strong> of the world</p><p> inspiration from <strong>Vincent Van Gogh</strong> and Edvard Munch, also <strong>German Gothic</strong> and ‘primitive art’</p><p><img src="/images/modern_art_history/moma-1-kirchner.jpg" alt="ERNST LUDWIG KIRCHNER (1880-1938) &#39;The Red Tower at Halle&#39;, 1915 (oil on canvas)"></p><h3 id="Artists-3"><a href="#Artists-3" class="headerlink" title="Artists"></a>Artists</h3><p>Die Brücke, Der Blaue Reiter</p><h2 id="ABSTRACT-ART-C-1907-ONWARDS"><a href="#ABSTRACT-ART-C-1907-ONWARDS" class="headerlink" title="ABSTRACT ART (C.1907 ONWARDS)"></a>ABSTRACT ART (C.1907 ONWARDS)</h2><p><strong>withdraw part of something</strong> in order to consider it separately (‘something’ = visual elements of a subject: its line, shape, tone, pattern, texture, form)</p><ol><li><p><strong>Semi-Abstraction</strong> is where the image still has one foot in representational art, (see <strong>Cubism and Futurism</strong>). </p><p> selects, develops and <strong>refines specific visual elements</strong> (e.g. line, color and shape), to create a <strong>poetic reconstruction or simplified essence</strong> of the original subject</p></li><li><p><strong>Pure Abstraction</strong> is where the artist uses visual elements <strong>independently</strong> as the actual subject of the work itself. (see <strong>Suprematism</strong>, De Stijl and Minimalism).</p></li></ol><p><strong>the roots of modern abstract art</strong> are to be found in <strong>Cubism</strong></p><p><img src="/images/modern_art_history/moma-1-braque.jpg" alt="GEORGES BRAQUE (1882-1963) &#39;Violin and Pitcher&#39;, 1910 (oil on canvas)"></p><h3 id="Artists-4"><a href="#Artists-4" class="headerlink" title="Artists"></a>Artists</h3><p>Concluded below.</p><h2 id="CUBISM-立体主义-1907-1915"><a href="#CUBISM-立体主义-1907-1915" class="headerlink" title="CUBISM 立体主义 (1907-1915)"></a>CUBISM 立体主义 (1907-1915)</h2><p>invented around 1907 in Paris by <strong>Pablo Picasso</strong> and <strong>Georges Braque</strong>. It was the first abstract style of modern art.</p><p>ignore the traditions of perspective drawing and show you <strong>many views of a subject at one time</strong></p><p>they drew on the <strong>expressive energy</strong> of art from other cultures, particularly African art</p><p>two phases: Analytical Cubism (pre-1912) and Synthetic Cubism (post-1912). </p><p><img src="/images/modern_art_history/moma-1-picasso.jpg" alt="PABLO PICASSO (1881-1973) &#39;Ambroise Vollard 一个人名&#39;, 1915 (oil on canvas)"></p><h3 id="Artists-5"><a href="#Artists-5" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Pablo Picasso</strong>, <strong>Georges Braque 布拉克</strong>, Juan Gris, Fernand Leger, Robert Delaunay, Albert Gleizes, Jean Metzinger, Louis Marcoussis, Marie Laurencin</p><h2 id="FUTURISM-1909-1914"><a href="#FUTURISM-1909-1914" class="headerlink" title="FUTURISM (1909-1914)"></a>FUTURISM (1909-1914)</h2><p>revolutionary Italian movement that <strong>celebrate modernity</strong>, attacked the long tradition of Italian art in favour of a new avant-garde 先锋派</p><p>They <strong>glorified industrialization, technology, and transport</strong> along with the speed, noise and energy of urban life. </p><p>adopted the <strong>visual vocabulary of Cubism</strong> to express their ideas - but appear more dynamic</p><p><img src="/images/modern_art_history/moma-1-balla.jpg" alt="GIACOMO BALLA (1871-1959) &#39;The Rhythm of the Violinist&#39;, 1912 (oil on canvas)"></p><h3 id="Artists-6"><a href="#Artists-6" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Filippo Tommaso Marinetti 马里内蒂</strong>, Umberto Boccioni, Giacomo Balla, Gino Severini, the musician Luigi Russolo, the architect Antonio Sant’Elia</p><h2 id="SUPREMATISM-至上主义-C-1915-1925"><a href="#SUPREMATISM-至上主义-C-1915-1925" class="headerlink" title="SUPREMATISM 至上主义 (C.1915-1925)"></a>SUPREMATISM 至上主义 (C.1915-1925)</h2><p>developed in 1915 by the Russian artist <strong>Kazimir Malevich</strong></p><p><strong>geometric style of abstract</strong> painting derived from elements of <strong>Cubism and Futurism</strong></p><p>Malevich rejected any use of representational images, believing that <strong>the non-representational forms of pure abstraction had a greater spiritual power</strong></p><blockquote><p>Suprematism: pure abstraction that advocated a mystical approach to art</p></blockquote><blockquote><p>Constructivism (the major Russian art movement of the 20th Century): served the social and political ideology of the state</p></blockquote><p><img src="/images/modern_art_history/moma-1-malevich.jpg" alt="KAZIMIR MALEVICH (1879-1935) &#39;Suprematism&#39;, 1915 (oil on canvas)"></p><h3 id="Artists-7"><a href="#Artists-7" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Kazimir Malevich 卡济米尔·马列维奇</strong></p><h2 id="CONSTRUCTIVISM-构成主义-C-1913-1930"><a href="#CONSTRUCTIVISM-构成主义-C-1913-1930" class="headerlink" title="CONSTRUCTIVISM 构成主义 (C.1913-1930)"></a>CONSTRUCTIVISM 构成主义 (C.1913-1930)</h2><p>same geometric language as Suprematism</p><p>abandoned its <strong>mystical vision</strong> in favour of their ‘<strong>Socialism of vision</strong>‘ - a Utopian glimpse of a mechanized modernity according to the ideals of the <a href="https://en.wikipedia.org/wiki/October_Revolution" target="_blank" rel="noopener">October Revolution</a> (1917)</p><p>However, it’s eventually repressed and replaced by <strong>Socialist Realism</strong></p><p><img src="/images/modern_art_history/moma-1-el_lissitzky.jpg" alt="EL LISSITZKY (1890-1941) &#39;The Red Wedge&#39;, 1919 (lithograph)"></p><h3 id="Artists-8"><a href="#Artists-8" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Vladimir Tatlin 塔特林</strong>, Alexander Rodchenko, El Lissitzky 利西茨基 and Naum Gabo</p><h2 id="DE-STIJL-风格主义-C-1917-1931"><a href="#DE-STIJL-风格主义-C-1917-1931" class="headerlink" title="DE STIJL 风格主义 (C.1917-1931)"></a>DE STIJL 风格主义 (C.1917-1931)</h2><p>a Dutch ‘style’ of pure abstraction</p><p>Mondrian was a deeply spiritual man who was intent on <strong>developing a universal visual language</strong> that was free from any <strong>hint of nationalism</strong> that led to the Great War.</p><p>refined the elements to <strong>a grid of lines and primary colors</strong> (a series of compositions that explored his universal principles of harmony)</p><p>Vertical lines embodied the direction and energy of the sun’s rays, countered by horizontal lines relating to the earth’s movement around it</p><p><img src="/images/modern_art_history/moma-1-mondrian.jpg" alt="PIET MONDRIAN (1872-1944) &#39;Composition with White and Yellow&#39;, 1942 (oil on canvas)"></p><h3 id="Artists-9"><a href="#Artists-9" class="headerlink" title="Artists"></a>Artists</h3><p><strong>Piet Mondrian 蒙德里安</strong>, Theo Van Doesburg, Bart van der Leck</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.artyfactory.com/art_appreciation/timelines/modern_art_timeline.htm" target="_blank" rel="noopener">http://www.artyfactory.com/art_appreciation/timelines/modern_art_timeline.htm</a></p>]]></content>
      
      
        <tags>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Modern Art and Ideas (Week 1), Introduction</title>
      <link href="/2016/07/31/%E8%89%BA%E6%9C%AF/Modern%20Art%201/"/>
      <url>/2016/07/31/%E8%89%BA%E6%9C%AF/Modern%20Art%201/</url>
      <content type="html"><![CDATA[<p>A course by <a href="https://www.coursera.org/learn/modern-art-ideas" target="_blank" rel="noopener">MoMA and Coursera</a></p><h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><p>Look at Modern Art <strong>by theme</strong>, instead of by <strong>time period, or by movement</strong>. </p><ol><li>Places and spaces</li><li>Art identity</li><li>Transforming everyday objects</li><li>Art &amp; society</li></ol><h2 id="Constructivism-learning"><a href="#Constructivism-learning" class="headerlink" title="Constructivism (learning)"></a>Constructivism (learning)</h2><p>It’s a philosophy of education about <a href="https://en.wikipedia.org/wiki/Constructivism" target="_blank" rel="noopener">nature of knowing</a>, that focuses on how humans make meaning from their experiences. </p><blockquote><p>All of us constantly organize and select the information our senses take in from the natural world and from the symbolic and cultural worlds of words and signs. This is how we make sense of these worlds. This activity is independent of any particular educational theory. It’s a consequence of our being human, of our neurological system and the way it develops and interacts with the environment.</p></blockquote><blockquote><p>Children are not born with the ability to interpret the world as their elders do. They have to learn the meaning of things and they do so gradually, as they gain experience. </p></blockquote><p>Hein, G. (1999). “Is Meaning Making Constructivism? Is Constructivism Meaning Making? <a href="https://d396qusza40orc.cloudfront.net/mairesources2015/Module%201%20Readings/Hein_isMeaningMaking.pdf" target="_blank" rel="noopener">The Exhibitionist, 18(2) 15-18.</a></p><h1 id="What-is-Modern-Art"><a href="#What-is-Modern-Art" class="headerlink" title="What is Modern Art"></a>What is Modern Art</h1><p>1860 - 1945 (or some say 1970)</p><h2 id="Birth"><a href="#Birth" class="headerlink" title="Birth"></a>Birth</h2><p>Can be traced back to the <strong>Industrial Revolution</strong> (from 18th to the 19th century)</p><blockquote><p>rapid changes in <strong>manufacturing, transportation, and technology</strong> profoundly affected the <strong>social, economic, and cultural conditions of life</strong> in Western Europe, North America, and eventually the world. </p></blockquote><h2 id="Contrast"><a href="#Contrast" class="headerlink" title="Contrast"></a>Contrast</h2><p>Before: </p><ol><li><p>artists were often commissioned to make artwork by wealthy patrons, or institutions like <strong>the church</strong></p></li><li><p>depicted <strong>religious</strong> or mythological scenes (intended to <strong>instruct the viewer</strong>)</p></li></ol><p>After:</p><ol><li><p>make art about people, places, or ideas that interested them, and of which they <strong>had direct experience</strong></p></li><li><p>exploring dreams, symbolism, and personal iconography (肖像学) as avenues for the depiction of their <strong>subjective(主观的) experiences</strong>.</p></li><li><p>expressive use of color, non-traditional materials, and new techniques and mediums (as oppose to realistically depict the world), eg. photography</p></li></ol><p>Ref: <a href="http://www.moma.org/learn/moma_learning/themes/what-is-modern-art" target="_blank" rel="noopener">http://www.moma.org/learn/moma_learning/themes/what-is-modern-art</a></p><h2 id="Conclude"><a href="#Conclude" class="headerlink" title="Conclude"></a>Conclude</h2><p>With <a href="http://wendistry.com/contemporary-vs-modern-whats-the-difference/" target="_blank" rel="noopener">these factors</a>: </p><ol><li>felt free to <strong>trust their inner visions</strong></li><li><strong>express those visions</strong> in their work</li><li>use <strong>real life</strong> (social issues and images from modern life) as a source of subject matter</li><li>experiment and innovate with <strong>different subject matters and mediums</strong> as often as possible</li></ol><blockquote><p>1970s is the last bastion of <strong>easily classified artistic movements</strong>. </p></blockquote><blockquote><p>Though hard to classify emergent movements, Contemporary Art, collectively, is much more socially, economically, and politically conscious. </p></blockquote><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>Advanced Placement Art History Exam: A Modern and Contemporary art study set</p><p>Vocabulary for Discussing Art</p><p><a href="https://www.coursera.org/learn/modern-art-ideas/supplement/R9Jkh/1-3-required-readings-and-additional-resources" target="_blank" rel="noopener">https://www.coursera.org/learn/modern-art-ideas/supplement/R9Jkh/1-3-required-readings-and-additional-resources</a></p>]]></content>
      
      
        <tags>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【摘抄】仪式感</title>
      <link href="/2015/11/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BB%AA%E5%BC%8F%E6%84%9F/"/>
      <url>/2015/11/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BB%AA%E5%BC%8F%E6%84%9F/</url>
      <content type="html"><![CDATA[<h1 id="生命中的特别瞬间"><a href="#生命中的特别瞬间" class="headerlink" title="生命中的特别瞬间"></a>生命中的特别瞬间</h1><p>职场与爱情是生命的重要内容，多重要？</p><p>因为缺乏必要的仪式感，生命中一些特别的瞬间就这样被错过了，心不在焉地生活，自然就没有美好瞬间这种东西——不能享受当下，又哪来的美好回忆呢？</p><p>慢下脚步，稍事休息，花点心思在生活中增加一点小小的仪式感，两个人的晚餐会因为一张餐巾变得浪漫，普通的朋友聚会会因为扮靓出席变得摇曳生姿……</p><h1 id="蒂凡尼的早餐"><a href="#蒂凡尼的早餐" class="headerlink" title="蒂凡尼的早餐"></a>蒂凡尼的早餐</h1><p>奥黛丽·赫本的经典影片《蒂凡尼的早餐》里，<strong>霍莉会穿着黑色小礼服，戴着假珠宝，在蒂凡尼精美的橱窗前，慢慢地将早餐吃完，可颂面包与热咖啡，宛若变成盛宴</strong>。</p><p>这诗意的仪式感，让苍白的生活光华熠熠，映照着霍莉心中美好的向往。</p><p>人人都爱蒂凡尼的早餐，可是却鲜少有人扭头看看自己在生活里，仪式感有多么匮乏。</p><p>（<strong>现代人对于喝茶的热爱</strong>，一定程度上，也是对仪式感的迷恋。）</p><h1 id="小王子-狐狸"><a href="#小王子-狐狸" class="headerlink" title="小王子, 狐狸"></a>小王子, 狐狸</h1><p>小王子在驯养狐狸后的第二天又去看望它。</p><p>“你每天最好在相同的时间来，”狐狸说，“比如说，你下午四点钟来，那么从三点钟起，我就开始感到幸福。时间越临近，我就越感到幸福。到了四点钟的时候，我就会坐立不安；我就会发现幸福的代价。但是，如果你随便什么时候来，我就不知道在什么时候该准备好我的心情……应当有一定的仪式。”</p><p>“仪式是什么？”小王子问道。</p><p>“这也是经常被遗忘的事情。”狐狸说，“<strong>它就是使某一天与其他日子不同，使某一时刻与其他时刻不同</strong>。”</p><p>而仪式感对于生活的意义就在于，用庄重认真的态度去对待生活里看似无趣的事情，不管别人如何，一本正经认认真真地把事情做好，才能真真正正发现生活的乐趣。一个敷衍了事、平淡无趣的态度怎么能期待拥有一个趣意盎然的生活呢。</p><h1 id="婚礼"><a href="#婚礼" class="headerlink" title="婚礼"></a>婚礼</h1><p>婚礼当天，当我看着闺蜜伴随音乐款款走进教堂，由父亲托付给丈夫，在教堂中央彼此宣誓、交换戒指的那一刻，我突然理解，之前所有为仪式的付出都是必要的都是值得的。</p><p><strong>人们需要仪式感来表达内心的庄重与情感</strong>。</p><p>我们之所以需要婚礼、毕业旅行、散伙饭等等仪式，就是需要仪式感来给自己未来的开始赋予新的意义。</p><h1 id="武打"><a href="#武打" class="headerlink" title="武打"></a>武打</h1><p>在格斗对决生死之战中的一个人，面对强敌，手持钢刀，右脚横踩出一步，同时握紧刀把，向前虚劈一刀，左手立掌胸前…. 如此郑重地作出这个架势，并不能够对敌人造成实质的伤害，那么人为什么需要这么郑重地认真地做这样的一个动作呢？</p><p>其实，这也是仪式。人，藉由这种仪式带来的仪式感，来给自己一种强烈的自我暗示。这种自我暗示能够使自我变革，把自己的专注力、反应能力、运动能力迅速提升。</p><p><strong>所以人需要仪式感，其中一个原因，就是需要某种自我暗示</strong>，有的暗示自己要更认真，更专注，要更快，要更高，要更强，要自我变革，让自己能够生存下来。</p>]]></content>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL learning notes</title>
      <link href="/2015/09/20/Technology/sql-learning/"/>
      <url>/2015/09/20/Technology/sql-learning/</url>
      <content type="html"><![CDATA[<p>Raw data: </p><pre><code>drop table Frequents;drop table Sells;drop table Likes;drop table Drinkers;drop table Bars;drop table Beers;create table Beers (    name varchar(50),    manf varchar(100),    primary key (name));create table Bars (    name varchar(50),    addr varchar(100),    primary key (name));create table Drinkers (    name varchar(50),    addr varchar(100),    phone int,    primary key (name));create table Likes (    drinker varchar(50),    beer varchar(50),    primary key (drinker, beer));create table Sells (    bar varchar(50),    beer varchar(50),    price float);create table Frequents (    drinker varchar(50),    bar varchar(50));Insert into Beers values(&apos;erdinger&apos;, &apos;Germany&apos;);Insert into Beers values(&apos;corona&apos;, &apos;Mexico&apos;);Insert into Beers values(&apos;heineken&apos;, &apos;Netherland&apos;);Insert into Beers values(&apos;guinness&apos;, &apos;Ireland&apos;);Insert into Beers values(&apos;stella artois&apos;, &apos;Belgium&apos;);Insert into Beers values(&apos;qingtao&apos;, &apos;&apos;);Insert into Beers values(&apos;harbin&apos;, NULL);Insert into Beers values(&apos;franziskaner&apos;, &apos;Germany&apos;);Insert into Bars values(&apos;familiar&apos;, &apos;1st road&apos;);Insert into Bars values(&apos;mermaid&apos;, &apos;2nd avn&apos;);Insert into Bars values(&apos;beehive&apos;, &apos;3rd cresent&apos;);Insert into Bars values(&apos;worldsend&apos;, &apos;4th bolvd&apos;);Insert into Drinkers values(&apos;zhang&apos;, &apos;ntu&apos;, 9079878);Insert into Drinkers values(&apos;wang&apos;, &apos;nus&apos;, 2345345);Insert into Drinkers values(&apos;li&apos;, &apos;smu&apos;, 45345);Insert into Drinkers values(&apos;zhao&apos;, &apos;sutd&apos;, 5643565);Insert into Likes values(&apos;zhang&apos;, &apos;corona&apos;);Insert into Likes values(&apos;zhang&apos;, &apos;heineken&apos;);Insert into Likes values(&apos;wang&apos;, &apos;guinness&apos;);Insert into Likes values(&apos;wang&apos;, &apos;heineken&apos;);Insert into Likes values(&apos;li&apos;, &apos;heineken&apos;);Insert into Likes values(&apos;zhao&apos;, &apos;stella artois&apos;);Insert into Sells values(&apos;familiar&apos;, &apos;erdinger&apos;, 12);Insert into Sells values(&apos;familiar&apos;, &apos;corona&apos;, 22);Insert into Sells values(&apos;familiar&apos;, &apos;heineken&apos;, 14);Insert into Sells values(&apos;mermaid&apos;, &apos;erdinger&apos;, 24);Insert into Sells values(&apos;mermaid&apos;, &apos;corona&apos;, 12);Insert into Sells values(&apos;mermaid&apos;, &apos;guinness&apos;, 21);Insert into Sells values(&apos;beehive&apos;, &apos;corona&apos;, 19);Insert into Sells values(&apos;beehive&apos;, &apos;heineken&apos;, 29);Insert into Sells values(&apos;beehive&apos;, &apos;guinness&apos;, 19);Insert into Sells values(&apos;beehive&apos;, &apos;stella artois&apos;, 9);Insert into Sells values(&apos;worldsend&apos;, &apos;erdinger&apos;, 22);Insert into Sells values(&apos;worldsend&apos;, &apos;corona&apos;, NULL);Insert into Frequents values(&apos;zhang&apos;, &apos;familiar&apos;);Insert into Frequents values(&apos;zhang&apos;, &apos;mermaid&apos;);Insert into Frequents values(&apos;wang&apos;, &apos;beehive&apos;);Insert into Frequents values(&apos;li&apos;, &apos;familiar&apos;);Insert into Frequents values(&apos;li&apos;, &apos;beehive&apos;);Insert into Frequents values(&apos;zhao&apos;, &apos;familiar&apos;);Insert into Frequents values(&apos;zhao&apos;, &apos;beehive&apos;);Insert into Frequents values(&apos;zhao&apos;, &apos;worldsend&apos;);select * from Beers;select * from Bars;select * from Drinkers;select * from Likes;select * from Sells;select * from Frequents;</code></pre><h1 id="Test-1"><a href="#Test-1" class="headerlink" title="Test 1"></a>Test 1</h1><p>Now using the raw data, write these queries: </p><p>– select beer with empty or NULL manf</p><p>– find the beer liked by &gt;=1 person who frequents ‘familiar’</p><p>– find pairs of beer from same manf</p><p>– first, find out the price of ‘guinness’ sold at ‘beehive’<br>– then, find all beers at any bar sold at the same price</p><p>– find the name and manf of each beer that ‘zhang’ likes<br>– try to use the ‘in’ keyword</p><p>– find the beer sold for the highest price<br>– try to use the ‘all’ keyword</p><p>– find beers that are the only beer by their manufacturer<br>– try to use the ‘exists’ keyword</p><p>– find the drinkers and beers pairs that:<br>– 1. drinker likes the beer<br>– 1. drinker frequents at least 1 bar that sells the beer</p><p>– find all prices charged for ‘corona’</p><p>– count number of bars that sells ‘corona’</p><p>– count number of bars that sells ‘corona’ at known price</p><p>– count number of different prices charged for ‘corona’ at bars</p><p>– calculate average price of each beer</p><p>– find for each drinker, the average price of ‘corona’<br>– at the bars that they frequent</p><h1 id="Test-2"><a href="#Test-2" class="headerlink" title="Test 2"></a>Test 2</h1><p>– find average price of those beer that are either served<br>– in &gt;= 3 bars, or are manufactured by ‘Netherland’</p><p>– delete all bears for which there’s another beer by the same manufacturer</p><p>Hint: </p><pre><code>DELETE B FROM beers B WHERE</code></pre><p>– first, add foreign key to table Sells, which references to the beer name<br>– second, delete any beer except ‘corona’, and see what happens to Sells</p><p>– recreate the Sells table, so that price is always &lt; $30(user CHECK keyword)</p><p>– recreate the Sells table, so that only ‘familiar’ can sell beer less than $10 (user CHECK keyword)</p><p>– create a view of your choice and explain what it does. </p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Operating System learning notes</title>
      <link href="/2015/08/10/Technology/os-learning/"/>
      <url>/2015/08/10/Technology/os-learning/</url>
      <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><h2 id="Top-down-hardware-abstraction-layer"><a href="#Top-down-hardware-abstraction-layer" class="headerlink" title="Top-down: hardware abstraction layer"></a>Top-down: hardware abstraction layer</h2><p><strong>Turn hardware into something that applications can use</strong>. “standard library” “OS as virtual machine”</p><ol><li><p>eg. printf(“hello world”), shows up on screen, App issue system calls to use OS abstractions</p></li><li><p>eg. each app doesn’t have to write a graphics driver.</p></li><li><p>eg. consistent interface: support for scsi/ide/flash disks</p></li></ol><h2 id="Bottom-up-resource-manager-coordinator"><a href="#Bottom-up-resource-manager-coordinator" class="headerlink" title="Bottom-up: resource manager/coordinator"></a>Bottom-up: resource manager/coordinator</h2><p>Manage your computer’s resources. Resource = CPU, Memory, disk, device, bandwidth… </p><ol><li><p>sharing/multiplexing more than 1 app.</p></li><li><p>protect, who gets what when.</p></li><li><p>performance: fair and efficient.</p></li></ol><h1 id="OS-abstraction-Process"><a href="#OS-abstraction-Process" class="headerlink" title="OS abstraction: Process"></a>OS abstraction: Process</h1><p>A key OS abstraction: the applications you use are<br>built of processes. </p><h2 id="Processes-are-protected-from-each-other"><a href="#Processes-are-protected-from-each-other" class="headerlink" title="Processes are protected from each other"></a>Processes are protected from each other</h2><p><strong>In computing, a <a href="https://en.wikipedia.org/wiki/Virtual_address_space" target="_blank" rel="noopener">virtual address space (VAS)</a> or address space</strong> is the set of ranges of virtual addresses that an operating system makes available to a process.</p><p>This provides several benefits, one of which is, if each process is given a separate address space, <strong>security through process isolation</strong>.</p><h2 id="Unix-process-related-system-calls"><a href="#Unix-process-related-system-calls" class="headerlink" title="Unix process-related system calls"></a>Unix process-related system calls</h2><pre><code>int fork(void) </code></pre><p>create a copy of the invoking process</p><pre><code>int execv (const char* prog, const char* argv[]) </code></pre><p>replace current process with a new one</p><pre><code>int wait(int *status) </code></pre><p>wait for a child to exit</p><h2 id="process-communication-pipe"><a href="#process-communication-pipe" class="headerlink" title="process communication: pipe"></a>process communication: pipe</h2><pre><code>int pipe(int fds[2])</code></pre><ol><li><p>Creates a one way communication channel</p></li><li><p>fds[2] is used to return two file descriptors</p></li><li><p>Bytes written to fds[1] will be read from fds[0]</p></li></ol><h1 id="Kernel-most-interesting-part-of-OS"><a href="#Kernel-most-interesting-part-of-OS" class="headerlink" title="Kernel: most interesting part of OS"></a>Kernel: most interesting part of OS</h1><p>Unix System Architecture: </p><p>{<1>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-07-25%20at%2010.14.54%20PM.png" alt=""></1></p><h2 id="virtual-machine"><a href="#virtual-machine" class="headerlink" title="virtual machine"></a>virtual machine</h2><p>Export a fake hardware interface so that<br>multiple OS can run on top.</p><p>{<2>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-07-25%20at%2010.39.50%20PM.png" alt=""></2></p><h2 id="batch-processing"><a href="#batch-processing" class="headerlink" title="batch processing"></a>batch processing</h2><p>ordered, bad but high utilization</p><h2 id="spooling"><a href="#spooling" class="headerlink" title="spooling"></a>spooling</h2><blockquote><p>The most common spooling application is print spooling. In print spooling, documents are loaded into a buffer (usually an area on a disk), and then the printer pulls them off the buffer at its own rate. </p></blockquote><blockquote><p>Because the documents are in a buffer where they can be accessed by the printer, you can perform other operations on the computer while the printing takes place in the background. </p></blockquote><h2 id="Multiprogramming"><a href="#Multiprogramming" class="headerlink" title="Multiprogramming"></a>Multiprogramming</h2><p>Several programs are run at the same time <strong>on a uniprocessor</strong>. Since there is only one processor , there can be no true simultaneous execution of different programs. Instead, the operating system executes part of one program, then part of another. </p><p>OS chooses which to run.</p><p>Ref: <a href="http://www.cs.columbia.edu/~junfeng/13fa-w4118/lectures/l02-os-intro.pdf" target="_blank" rel="noopener">http://www.cs.columbia.edu/~junfeng/13fa-w4118/lectures/l02-os-intro.pdf</a></p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP learning notes (1/3) all about http</title>
      <link href="/2015/06/06/Technology/http-learning-1/"/>
      <url>/2015/06/06/Technology/http-learning-1/</url>
      <content type="html"><![CDATA[<h1 id="图解-http读书笔记"><a href="#图解-http读书笔记" class="headerlink" title="图解 http读书笔记"></a><em>图解 http</em>读书笔记</h1><p><em><a href="http://www.amazon.co.jp/HTTP%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E4%B8%8A%E9%87%8E-%E5%AE%A3/dp/479812625X" target="_blank" rel="noopener">HTTP の教科書</a></em> by Tricorder CEO 上野宣</p><h1 id="Foundamentals"><a href="#Foundamentals" class="headerlink" title="Foundamentals"></a>Foundamentals</h1><h2 id="1989-birth-of-HTTP"><a href="#1989-birth-of-HTTP" class="headerlink" title="1989, birth of HTTP"></a>1989, birth of HTTP</h2><p><a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#History" target="_blank" rel="noopener">Tim Berners-Lee first proposed the “WorldWideWeb” project in 1989</a> — now known as the World Wide Web. The first version of the protocol had only one method, namely GET, which would request a page from a server.</p><p>1991, HTTP/0.9 现在的HTTP其实含有HTTP1.0之前版本的意思,因此被称为HTTP/0.9。</p><p>1996 HTTP/1.0, rfc1945. widely used today. </p><p>1997 HTTP/1.1, rfc2068, and later released updates with rfc2616. </p><p>today, HTTP/2.0 is under dev.</p><p>1994 - 2000 is the time for Browser War between IE and Netscape Navigator. </p><p>2004 - now, the war started again as Mozilla released Firefox. </p><h2 id="HTTP-versions"><a href="#HTTP-versions" class="headerlink" title="HTTP versions"></a>HTTP versions</h2><p>HTTP/1.0 defined GET, POST and HEAD methods and HTTP/1.1 added 5 new methods: OPTIONS, PUT, DELETE, TRACE and CONNECT. </p><p>In HTTP/0.9 and 1.0, the connection is closed after a single request/response pair. In HTTP/1.1 a keep-alive-mechanism was introduced, where a connection could be reused for more than one request. (client does not need to re-negotiate the TCP 3-Way-Handshake connection after the first request)</p><blockquote><p>当年 HTTP 协议的出现主要是为了解决文本传输的难题。由于协议本 身非常简单,于是在此基础上设想了很多应用方法并投入了实际使用。现 在 HTTP 协议已经超出了 Web 这个框架的局限,被运用到了各种场景里。</p></blockquote><h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><ol><li>application layer</li><li>transport (tcp/udp) layer</li><li>internet (ip) layer</li><li>data link (ethernet/fddi) layer</li></ol><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层决定了向用户提供应用服务时通信的活动。</p><p>TCP/IP 协议族内预存了各类通用的应用服务。比如,FTP(File Transfer Protocol,文件传输协议)和 DNS(Domain Name System, 域名系统)服务就是其中两类。</p><p>HTTP 协议也处于该层。</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层提供处于网络连接中的两台计算机之间的数据传输。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层用来处理在网络上流动的数据包。</p><p>数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(所谓的传输路线)到达对 方计算机,并把数据包传送给对方。 </p><p>与对方计算机之间通过多台计算机或网络设备进行传输时,网络层所起的作用就是在众多的选项内选择一条传输路线。</p><h2 id="链路层-又名数据链路层"><a href="#链路层-又名数据链路层" class="headerlink" title="链路层(又名数据链路层)"></a>链路层(又名数据链路层)</h2><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱 动、NIC(Network Interface Card,网络适配器,即网卡),及光纤等</p><p>{<1>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2012.33.28%20AM.png" alt=""></1></p><h2 id="more-on-IP"><a href="#more-on-IP" class="headerlink" title="more on IP"></a>more on IP</h2><p>IP 协议的作用是把各种数据包传送给对方。</p><p>IP 地址指明了节点被分配到的地址,MAC 地址是指网卡所属的固 定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换,但 MAC 地址基本上不会更改。</p><h3 id="IP-间的通信依赖-MAC-地址。"><a href="#IP-间的通信依赖-MAC-地址。" class="headerlink" title="IP 间的通信依赖 MAC 地址。"></a>IP 间的通信依赖 MAC 地址。</h3><p>经过多台计算机和网络设备中转才 能连接到对方。而在进行中转时,会利用下一站中转设备的 MAC 地址 来搜索下一个中转目标。</p><p>这时,会采用 ARP 协议(Address Resolution Protocol)。ARP 是一种用以解析地址的协议,根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</p><h3 id="routing"><a href="#routing" class="headerlink" title="routing"></a>routing</h3><p>在到达通信目标前的中转过程中,那些计算机和路由器等网络设备 只能获悉很粗略的传输路线。<br>这种机制称为路由选择(routing),有点像快递公司的送货过程。</p><h2 id="more-on-TCP-and-DNS"><a href="#more-on-TCP-and-DNS" class="headerlink" title="more on TCP and DNS"></a>more on TCP and DNS</h2><p>为了准确无误地将数据送达目标处,TCP 协议采用了三次握手 (three-way handshaking)策略。</p><p>用 TCP 协议把数据包送出去后,TCP 不会对传送后的情况置之不理,它一定会向对方确认是否成功送达。握 手过程中使用了 TCP 的标志(flag)——SYN(synchronize)和 ACK( acknowledgement)。</p><p>DNS(Domain Name System)服务是和 HTTP 协议一样位于应用层</p><h2 id="dry-run"><a href="#dry-run" class="headerlink" title="dry run"></a>dry run</h2><p>{<2>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2012.53.44%20AM.png" alt=""></2></p><h1 id="the-basics-of-HTTP-protocol"><a href="#the-basics-of-HTTP-protocol" class="headerlink" title="the basics of HTTP protocol"></a>the basics of HTTP protocol</h1><p>在两台计算机之间使用 HTTP 协议通信时,在一条通信线路上必定 有一端是客户端,另一端则是服务器端。</p><p>有时候,按实际情况,两台计算机角色可能会互换。但就仅从一条通信路线来说,服务器端和客户端的角色是 确定的。</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>{<3>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2012.58.05%20AM.png" alt=""></3></p><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><p>{<4>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2012.58.11%20AM.png" alt=""></4></p><h2 id="stateless"><a href="#stateless" class="headerlink" title="stateless"></a>stateless</h2><p>HTTP 是一种不保存状态,即无状态(stateless)协议。</p><p>HTTP/1.1 虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信,就可以管 理状态了。</p><h2 id="请求-URI-定位资源"><a href="#请求-URI-定位资源" class="headerlink" title="请求 URI 定位资源"></a>请求 URI 定位资源</h2><p>In request header, we specify either the full path or the relative path. </p><p>{<5>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%201.00.49%20AM.png" alt=""></5></p><h2 id="other-than-GET-method"><a href="#other-than-GET-method" class="headerlink" title="other than GET method"></a>other than GET method</h2><p>POST: 功能与 GET 很相似,但 POST 的主要目的并不是获取响应的主体内容。</p><p>PUT: 传输文件</p><p>HEAD: 和 GET 方法一样,只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p><p>DELETE: HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机 制,所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用程 序的验证机制,或遵守 REST 标准时还是有可能会开放使用的。</p><p>OPTIONS: 查询针对请求 URI 指定的资源支持的方法。</p><p>and TRACE, CONNECT.</p><p>{<6>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%201.07.22%20AM.png" alt=""></6></p><h2 id="HTTP-persistent-connection"><a href="#HTTP-persistent-connection" class="headerlink" title="HTTP persistent connection"></a>HTTP persistent connection</h2><p>{<7>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%202.53.44%20AM.png" alt=""></7></p><p>随着 HTTP 的普及,文档中包含大量图片的 情况多了起来。每次的请求都会造成无谓的 TCP 连接建立和断开, 增加通信量的开销。</p><p>HTTP/1.1 和一部分的 HTTP/1.0 想出 了持久连接(HTTP Persistent Connections,也称为 HTTP keep-alive 或 HTTP connection reuse)的方法。持久连接的特点是,只要任意一端没 有明确提出断开连接,则保持 TCP 连接状态。</p><p>{<8>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%202.55.45%20AM.png" alt=""></8></p><p>Under HTTP 1.0, there is <a href="http://en.wikipedia.org/wiki/HTTP_persistent_connection#HTTP_1.0" target="_blank" rel="noopener">no official specification for how keepalive operates</a>. It was, in essence, added to an existing protocol. If the client supports keep-alive, it adds an additional header to the request:</p><pre><code>Connection: Keep-Alive</code></pre><p>In HTTP 1.1, all connections are considered persistent unless declared otherwise.</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息,通知客户端保存 Cookie。</p><p>当下次客户端再往该服务器 发送请求时,客户端会自动在请求报文中加入 Cookie 值后发送出去。</p><p>{<9>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%203.25.58%20AM.png" alt=""></9></p><h1 id="Inside-a-HTTP-message"><a href="#Inside-a-HTTP-message" class="headerlink" title="Inside a HTTP message"></a>Inside a HTTP message</h1><p>HTTP 报文大致可分为报文首部和报文主体两块。两者由 <strong>最初出现的空行(CR+LF)来划分</strong>。</p><p>通常,并不一定要有报文主体。</p><p>{<10>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%203.29.47%20AM.png" alt=""></10></p><h2 id="message-vs-entity"><a href="#message-vs-entity" class="headerlink" title="message vs. entity"></a>message vs. entity</h2><p>HTTP 报文的主体用于传输请求或响应的实体主体。</p><pre><code>HTTP-message   = Request | Response     ; HTTP/1.1 messages</code></pre><p>A HTTP-message has &gt;=0 message-headers and may have ONE message-body:</p><pre><code>generic-message = start-line                  *(message-header CRLF)                   CRLF                   [ message-body ]</code></pre><p>通常,报文主体等于实体主体。只有当传输中进行编码操作时,实体主体的内容发生变化,才导致它和报文主体产生差异。</p><p>So not every HTTP-message has a message-body. But if it has a message-body, then that’s also the entity-body:</p><pre><code>message-body = entity-body             | &lt;entity-body encoded as per Transfer-Encoding&gt;</code></pre><h2 id="HTTP-compression"><a href="#HTTP-compression" class="headerlink" title="HTTP compression"></a>HTTP compression</h2><p>HTTP data is compressed before it is sent from the server: </p><ol><li>compliant browsers will announce what methods are supported</li><li>browsers that do not support compliant compression method will download uncompressed data. </li><li>The most common compression schemes include gzip and Deflate</li></ol><h2 id="Chunked-transfer-encoding"><a href="#Chunked-transfer-encoding" class="headerlink" title="Chunked transfer encoding"></a>Chunked transfer encoding</h2><p>Only in version 1.1 of HTTP.</p><p>在传输大容量数据时,通过把数据分割 成多块,能够让浏览器逐步显示页面。</p><p>这种把实体主体分块的功能称为分块传输编码(Chunked Transfer Coding)。</p><h2 id="multipart"><a href="#multipart" class="headerlink" title="multipart"></a>multipart</h2><p>HTTP 协议中也采纳了多部分对象集合,发送的一份报文 主体内可含有多类型实体。通常是在图片或文本文件等上传时使用。</p><p><a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2" target="_blank" rel="noopener">The following example illustrates “multipart/form-data” encoding</a>. Suppose we have the following form:</p><pre><code>&lt;FORM action=&quot;http://server.com/cgi/handle&quot;       enctype=&quot;multipart/form-data&quot;       method=&quot;post&quot;&gt;   &lt;P&gt;   What is your name? &lt;INPUT type=&quot;text&quot; name=&quot;submit-name&quot;&gt;&lt;BR&gt;   What files are you sending? &lt;INPUT type=&quot;file&quot; name=&quot;files&quot;&gt;&lt;BR&gt;   &lt;INPUT type=&quot;submit&quot; value=&quot;Send&quot;&gt; &lt;INPUT type=&quot;reset&quot;&gt;&lt;/FORM&gt;</code></pre><p>If the user enters “Larry” in the text input, and selects the text file “file1.txt”, the user agent might send back the following data:</p><pre><code>Content-Type: multipart/form-data; boundary=AaB03x--AaB03xContent-Disposition: form-data; name=&quot;submit-name&quot;Larry--AaB03xContent-Disposition: form-data; name=&quot;files&quot;; filename=&quot;file1.txt&quot;Content-Type: text/plain... contents of file1.txt ...--AaB03x--</code></pre><p>使用 boundary 字符串来划分多部分对象集合指明的各类实体。在 boundary 字符串指定的各个实体的起始行之前插入“–”标记</p><h2 id="HTTP-Range-Requests"><a href="#HTTP-Range-Requests" class="headerlink" title="HTTP Range Requests"></a>HTTP Range Requests</h2><p>指定范围发送的 请求叫做范围请求(Range Request)。</p><p>对一份 10 000 字节大小的资源,如果使用范围请求,可以只请求 5001~10 000 字节内的资源。</p><p><a href="http://en.wikipedia.org/wiki/Byte_serving" target="_blank" rel="noopener">Clients which request byte-serving might do so</a> in cases in which a large file has been only partially delivered and a limited portion of the file is needed in a particular range. </p><p>In the HTTP/1.0 standard, clients were only able to request an entire document. </p><h2 id="Content-negotiation"><a href="#Content-negotiation" class="headerlink" title="Content negotiation"></a>Content negotiation</h2><p>当浏览器的默认语言为英语或中文,访问相同 URI 的 Web 页面时, 则会显示对应的英语版或中文版的 Web 页面。</p><p>{<11>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2011.30.18%20AM.png" alt=""></11></p><p>Content negotiation makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best. </p><h1 id="Status-codes-in-HTTP"><a href="#Status-codes-in-HTTP" class="headerlink" title="Status codes in HTTP"></a>Status codes in HTTP</h1><ol><li>1xx Informational</li><li>2xx Success</li><li>3xx Redirection</li><li>4xx Client Error</li><li>5xx Server Error</li></ol><p>Read more at <a href="http://www.w3.org/Protocols/HTTP/HTRESP.html" target="_blank" rel="noopener">w3.org</a></p><p>{<12>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%201.36.46%20PM.png" alt=""></12></p><h2 id="HTTP-301"><a href="#HTTP-301" class="headerlink" title="HTTP 301"></a>HTTP 301</h2><p>当 301、302、303 响应状态码返回时,几乎所有的浏览器都会把 POST 改成 GET,并删除请求报文内的主体,之后请求会自动再次发送。</p><p>301、302 标准是禁止将 POST 方法改变成 GET 方法的,但实际使用 时大家都会这么做。</p><p>Google recommends using a 301 redirect to change the URL of a page as it is shown in search engine results.</p><h1 id="web-server"><a href="#web-server" class="headerlink" title="web server"></a>web server</h1><p>HTTP/1.1 规范允许一台 HTTP 服务器搭建多个 Web 站点。</p><p>即使物理层面只有一台服务器,但只要使用虚拟主机 (VPS) 的功能,则可 以假想已具有多台服务器。</p><p>{<13>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%202.07.04%20PM.png" alt=""></13></p><p>在相同的 IP 地址下,由于虚拟主机可以寄存多个不同主机名和域 名的 Web 网站,因此在发送 HTTP 请求时,必须在 Host 首部内完整指 定主机名或域名的 URI。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理是一种有转发功能的应用程序,它扮演了位于服务器和客户端 “中间人”的角色,接收由客户端发送的请求并转发给服务器,同时也接收服务器返回的响应并转发给客户端。</p><p>{<14>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%202.32.34%20PM.png" alt=""></14></p><p>there’re mainly 2 kinds of proxy:</p><ol><li><p>缓存代理</p><p> 代理转发响应时,缓存代理(Caching Proxy)会预先将资源的副本 (缓存)保存在代理服务器上。</p><p> 当代理再次接收到对相同资源的请求时,就将之前缓存的资源作为响应返回。</p></li><li><p>透明代理</p><p> 转发请求或响应时,不对报文做任何加工的代理类型被称为透明代 理(Transparent Proxy)。反之,对报文内容进行加工的代理被称为非透明代理。</p></li></ol><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>网关是转发其他服务器通信数据的服务器,接收从客户端发送来的 请求时,它就像自己拥有资源的源服务器一样对请求进行处理。</p><p>有时客户端可能都不会察觉,自己的通信目标是一个网关。</p><p>{<15>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%202.38.42%20PM.png" alt=""></15></p><p>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器 提供非 HTTP 协议服务。(eg. 连接数据库,使用 SQL 语句查询数据。另外,在 Web 购物网站上进行信用卡结算时,网关可以和信用卡结算系统联动。)</p><h2 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h2><p>HTTP tunneling is a technique by which communications performed using various network protocols are encapsulated using the HTTP protocol. </p><p>{<16>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%202.47.52%20PM.png" alt=""></16></p><p>隧道可按要求建立起一条与其他服务器的通信线路,届时使用 SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的 通信。</p><p>隧道本身不会去解析 HTTP 请求。隧道会在通信双方断开连接时结束。</p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP learning notes (2/3) security</title>
      <link href="/2015/06/06/Technology/http-learning-2/"/>
      <url>/2015/06/06/Technology/http-learning-2/</url>
      <content type="html"><![CDATA[<h1 id="图解-http读书笔记"><a href="#图解-http读书笔记" class="headerlink" title="图解 http读书笔记"></a><em>图解 http</em>读书笔记</h1><p><em><a href="http://www.amazon.co.jp/HTTP%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8-%E4%B8%8A%E9%87%8E-%E5%AE%A3/dp/479812625X" target="_blank" rel="noopener">HTTP の教科書</a></em> by Tricorder CEO 上野宣</p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="Disadvantages-of-HTTP"><a href="#Disadvantages-of-HTTP" class="headerlink" title="Disadvantages of HTTP:"></a>Disadvantages of HTTP:</h2><ol><li>通信使用明文(不加密),内容可能会被窃听</li><li>不验证通信方的身份,因此有可能遭遇伪装</li><li>无法证明报文的完整性,所以有可能已遭篡改</li></ol><p>按 TCP/IP 协议族的工作机制,通信内容在所有的通信线路上都有可能遭到窥视。</p><p>窃听相同段上的通信并非难事。只需要收集在互联网上流动的数据包(帧)就行了。对于收集来的数据包的解析工作,可交给那些抓包(Packet Capture)或嗅探器(Sniffer)工具。</p><h2 id="1-内容的加密"><a href="#1-内容的加密" class="headerlink" title="1. 内容的加密"></a>1. 内容的加密</h2><p>把 HTTP 报 文里所含的内容进行加密处理。</p><p>由于该方式不同于 SSL 或 TLS 将整个通信线路加密处理,所以内容仍 有被篡改的风险。比如,从某个 Web 网站上下载内容,是无法确定客户端下载的文件和服务器上存放的文件是否前后一致的。文件内容在传输途中可能已 经被篡改为其他的内容。</p><p>{<1>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%204.56.22%20PM.png" alt=""></1></p><p>像这样,请求或响应在传输途中,遭攻击者拦截并篡改内容的攻击 称为中间人攻击(Man-in-the-Middle attack,MITM)。</p><p>使用 HTTP 协议确定报文完整性的方法,常用MD5 和 SHA-1 等散列值校验的方法,以及用来确认文件的数字签名方法。但事实上并不便捷、可靠。</p><p>用户需要手动下载验证文件。浏览器无法自动帮用户检查。</p><p>而且PGP 和 MD5 本身被改写的话,用户是没有办法意识到的。</p><h2 id="2-通信的加密-TLS-SSL"><a href="#2-通信的加密-TLS-SSL" class="headerlink" title="2. 通信的加密: TLS/SSL"></a>2. 通信的加密: TLS/SSL</h2><p>HTTP 协议中没有加密机制,但可以通 过和 SSL(Secure Socket Layer,安全套接层)或 TLS(Transport Layer Security,安全层传输协议)的组合使用,加密 HTTP 的通信内容。</p><p>Transport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), are cryptographic protocols designed to provide communications security over a computer network. </p><p>当使用 SSL 时,它的处理速度会 变慢。一是指通信慢，因为大量的SSL 通信。另一是指由于大量消耗 CPU 及内存等资源,导致处理速度变慢。和使用 HTTP 相比,网络负载可能会变慢 2 到 100 倍。</p><p>针对速度变慢这一问题,并没有根本性的解决方案,我们会使用 SSL 加速器这种(专用服务器)硬件来改善该问题。该硬件为 SSL 通信 专用硬件,相对软件来讲,能够提高数倍 SSL 的计算速度。</p><h3 id="Why-not-HTTPS"><a href="#Why-not-HTTPS" class="headerlink" title="Why not HTTPS?"></a>Why not HTTPS?</h3><p>每当那些访问量较多的 Web 网站在进行加密处理时,它们所承 担着的负载不容小觑。并且，使用的证书必须向认证机 构(CA)购买。</p><h2 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+ 加密 + 认证 + 完整性保护 =HTTPS"></a>HTTP+ 加密 + 认证 + 完整性保护 =HTTPS</h2><p>HTTPS 并非是应用层的一种新协议。</p><ol><li>HTTP: 直接和 TCP 通信。</li><li>HTTPS: 先和 SSL 通信,再由 SSL 和 TCP 通信了。</li></ol><p>简言之,所谓 HTTPS,其实就是 身披 SSL 协议这层外壳的 HTTP。(TLS and SSL encrypt data in the application layer)</p><p>SSL 是独立于 HTTP 的协议,所以不光是 HTTP 协议,其他运行在 应用层的 SMTP 和 Telnet 等协议均可配合 SSL 协议使用。可以说 SSL 是当今世界上应用最为广泛的网络安全技术。</p><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><ol><li>common key crypto system</li><li>private/public key</li></ol><p>要想根据密文和公开密钥,恢复到信息原文是异常困难的, 因为解密过程就是在对离散对数进行求值,这并非轻而易举就能办到。</p><h3 id="HTTPS-采用混合加密机制"><a href="#HTTPS-采用混合加密机制" class="headerlink" title="HTTPS 采用混合加密机制"></a>HTTPS 采用混合加密机制</h3><p>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。<br>因为公开密钥加密处理速度慢。</p><p>在交换密钥环节使用公开密钥加密方式,之后的建立通信交换报文阶段 则使用共享密钥加密方式。</p><h2 id="how-HTTPS-works"><a href="#how-HTTPS-works" class="headerlink" title="how HTTPS works"></a>how HTTPS works</h2><ol><li><p>数字证书认证机构(CA,Certificate Authority) 颁发公开密钥证书。</p><p> website 向数字证书认证机构提出公开密钥的申请。CA 在判明提出申请者的身份之后,会对已申请的 public key 做数字签名,然 后分配这个已签名的公开密钥, 并将该公开密钥放入公钥证书后绑定在 一起。</p></li><li><p>client side request this certificate</p><p> website 会将这份由数字证书认证机构颁发的公钥证书发送给客户 端,以进行公开密钥加密方式通信。公钥证书也可叫做数字证书或直接 称为证书。</p><p> 接到证书的 client browser 可使用数字证书认证机构的公开密钥,对那张证 书上的数字签名进行验证</p></li><li><p>How does client know CA’s public key, then?</p><p> 多数浏览器开发商发布版 本时,会事先在内部植入常用认证机关的公开密钥。</p></li></ol><p>{<2>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%209.25.16%20PM.png" alt=""></2></p><blockquote><p>2011 年 7 月,荷兰的一家名叫 DigiNotar 的 认证机构曾遭黑客不法入侵,颁布了 google.com 和 twitter.com 等网站 的伪造证书事件。这一事件从根本上撼动了 SSL 的可信度。</p></blockquote><p>{<3>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%209.28.47%20PM.png" alt=""></3></p><h2 id="SSL-客户端证书"><a href="#SSL-客户端证书" class="headerlink" title="SSL 客户端证书"></a>SSL 客户端证书</h2><p>HTTPS 中还可以使用客户端证书。以客户端证书进行客户端认证, 证明服务器正在通信的对方始终是预料之内的客户端, 银行的网上银行就采用了客户端证书。</p><p>but it’s not widely used because:</p><ol><li>not everyone likes (or knows how) to install a certificate.</li><li>certificate costs</li><li>if you hack into root access, the certificate will be available to you</li></ol><p>现状是,安全性极高的认证机构可颁发客户端证书但仅用于特殊用 途的业务。</p><h2 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h2><p>使用 OpenSSL 这套开源程序,每个人都可以构建一套属于自 己的认证机构,从而自己给自己颁发服务器证书。</p><p>浏览器访问该服务器时,会显示“无法确认连接安全性”</p><h1 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h1><p>HTTP/1.1 使用的认证方式:</p><ol><li>BASIC 认证(基本认证)</li><li>DIGEST 认证(摘要认证)</li><li>SSL 客户端认证</li><li>FormBase 认证(基于表单认证)</li></ol><h2 id="BASIC-认证"><a href="#BASIC-认证" class="headerlink" title="BASIC 认证"></a>BASIC 认证</h2><p>since HTTP/1.0</p><p>simplest technique for enforcing access controls to web resources because it doesn’t require cookies, session identifier and login pages. 现在仍有一部分的网站会使用这种认证方式。</p><p>{<4>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%209.53.21%20PM.png" alt=""></4></p><p>The BA mechanism provides no confidentiality protection for the transmitted credentials. They are merely encoded with Base64 in transit, but not encrypted or hashed in any way. </p><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>Convert 8-bit-padded (256-based) ASCII characters into Base64 scheme. Which is to say, convert 3 ASCII letters (24 bits) will be encoded into 4 Base64 letter (4 * 6 = 26). ‘Man’ converts to ‘TWFu’. </p><p>{<5>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2010.02.13%20PM.png" alt=""></5></p><p>在 HTTP 等非加密通信的线路上进行 BASIC 认证的过程中, 如果被人窃听,被盗的可能性极高。另外，browser无<br>法实现认证注销操作。</p><p>Basic Authentication is, therefore, typically used over HTTPS.</p><h2 id="DIGEST-认证"><a href="#DIGEST-认证" class="headerlink" title="DIGEST 认证"></a>DIGEST 认证</h2><p>since HTTP/1.1</p><p>{<6>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-06%20at%2010.23.21%20PM.png" alt=""></6></p><ol><li><p>when requested, server 会随着状态码 401 Authorization Required,返回带 WWW-Authenticate 首部字段, which 包含 realm 和 nonce 这两个字段的信息。(nonce 是一种任意随机字符串)。</p></li><li><p>client will return DIGEST 认证必须的首部字段 Authorization 信息, which 包含 username、realm、nonce、uri 和response 的字段信息。其中,realm 和 nonce 就是之前从服务器接收到的响应中的字段。<strong>response 也可叫做 Request-Digest,存放经过 MD5 运算后 的密码字符串,形成响应码</strong>。</p></li><li><p>server 接收到包含首部字段 Authorization 请求, 确认 认证信息，并返回包含 Request-URI 资源的响应。</p></li></ol><p>Technically, digest authentication is an application of MD5 cryptographic hashing with usage of nonce values to prevent replay attacks. It uses the HTTP protocol. </p><p><a href="http://en.wikipedia.org/wiki/Digest_access_authentication#Disadvantages" target="_blank" rel="noopener">Digest access authentication is vulnerable to</a> a man-in-the-middle (MitM) attack.</p><h2 id="SSL-客户端证书-1"><a href="#SSL-客户端证书-1" class="headerlink" title="SSL 客户端证书"></a>SSL 客户端证书</h2><ol><li>事先将客户端证书分发给客户 端,且客户端必须安装此证书。</li><li>when requested, server 发送 Certificate Request 报文,要求客户端提供客户端证书。</li><li>client send <strong>Client Certificate</strong>.</li><li>server validate and <strong>retrieve public key of client</strong>, then they start HTTPS.</li></ol><h2 id="Form-based-认证"><a href="#Form-based-认证" class="headerlink" title="Form-based 认证"></a>Form-based 认证</h2><p>由于使用上的便利性及安全性问题,HTTP 协议标准提供的 BASIC 认证和 DIGEST 认证几乎不怎么使用。另外,SSL 客户端认证虽然具有 高度的安全等级,但因为导入及维持费用等问题,还尚未普及。</p><p>反观，SSH 和 FTP, 服务器与客户端之间的认证是合乎标准规范的, 并且满足了基本的安全需求,因此 widely 使用。</p><p>对于 Web 网站的认证功能,能够满足 其安全使用级别的标准规范并不存在,所以只好使用由 Web 应用程序 各自实现基于表单的认证方式。</p><p>Form-based 认证的标准规范尚未有定论,<strong>一般会使用 Cookie 来管理 Session(会话)</strong>。</p><h2 id="Session-管理及-Cookie-应用"><a href="#Session-管理及-Cookie-应用" class="headerlink" title="Session 管理及 Cookie 应用"></a>Session 管理及 Cookie 应用</h2><p>我们使用 Cookie 来管理 Session,以弥补 HTTP 协议中不存在的状态管理功能。</p><p>Usign session id in Cookie is pretty easy process:</p><p>{<7>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-06-07%20at%2010.01.47%20AM.png" alt=""></7></p><ol><li><p>客户端把用户 ID 和密码等登录信息放入报文的实体部分, 通常是以 POST 方法把请求发送给服务器。而这时<strong>会使用 HTTPS 通信来进行</strong> HTML 表单画面的显示和用户输入 数据的发送。</p></li><li><p>服务器会发放用以识别用户的 Session ID (首部字段 Set-Cookie 内写入 Session ID 如 PHPSESSID=028a8c)。然后把用户的认 证状态与 Session ID 绑定后记录在服务器端(maybe a database, develop end will manage)。</p></li><li><p>客户端将 Cookie 保存在本地。浏览器下次 会自动发送 Cookie,所以 Session ID 也随之发送到服务器。</p></li></ol><p>You must not lose your session id, otherwise someone can act like they were you. </p><p>Web server will manage <strong>expiration of sessions</strong>. </p><p>To avoid 跨站脚本攻击(XSS), set HTTPonly as TRUE, for session cookie. </p><p>另外</p><blockquote><p>一种安全的保存方法是,先利用给密码加盐(salt)的方式<br>增加额外信息,再使用散列(hash)函数计算出散列值后保存。</p><p>salt 其实就是由服务器随机生成的一个字符串,但是要保证长度足够长。把它和密码字符串相连接(前后都可以)生成散 列值。</p><p>当两个用户使用了同一个密码时,由于随机生成的 salt 值不同,对应 的散列值也将是不同的。这样一来,很大程度上减少了密码特征, 攻击者也 就很难利用自己手中的密码特征库进行破解。</p></blockquote><h2 id="HTTPonly"><a href="#HTTPonly" class="headerlink" title="HTTPonly"></a>HTTPonly</h2><p>HttpOnly cookies can only be used when transmitted via HTTP (or HTTPS). They are not accessible through non-HTTP APIs such as JavaScript. </p><p><a href="http://cookiecontroller.com/internet-cookies/secure-cookies/" target="_blank" rel="noopener">This limits the potential damage many cross site script attacks can cause</a> – specifically, the attacks that target cookie data.</p><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><h3 id="Can-we-put-session-id-in-URL-instead-of-in-cookie"><a href="#Can-we-put-session-id-in-URL-instead-of-in-cookie" class="headerlink" title="Can we put session id in URL instead of in cookie?"></a>Can we put session id in URL instead of in cookie?</h3><p>Yes, but definitely not a good practise (even if we send these messages thru HTTPS). <a href="http://security.stackexchange.com/questions/14093/why-is-passing-the-session-id-as-url-parameter-insecure" target="_blank" rel="noopener">Here is a great post discussing about it</a>:</p><ol><li><p>if you send over a link to someone, he might use your session id and have full access to your account.</p></li><li><p>possibility of <strong>session fixation attacks</strong>, which means hackers send a prepared URL with a known session id to the user, and entice the user to log in. Once user does, hacker would have a session with priviledges. It’s not possible with cookies. </p></li><li><p>putting anything in the URL makes it more likely that it will leak. This can be through a Referer header in a linked resource, from access to the endpoint with browser history records, from brute force history sniffing, inappropriately protected web logs, and so on. </p></li></ol><p>A little history.</p><blockquote><p>the reason (session-in-URL) was typically done in the past was to support browsers without cookies enabled. This is less and less a concern these days, and the usability problems of not being to share links, in addition to the session fixation attacks, mean that session-in-URL is usually avoided today.</p></blockquote><h3 id="Can-we-sent-session-id-via-non-encrypted-HTTP"><a href="#Can-we-sent-session-id-via-non-encrypted-HTTP" class="headerlink" title="Can we sent session id via non-encrypted HTTP?"></a>Can we sent session id via non-encrypted HTTP?</h3><p><a href="http://security.stackexchange.com/questions/81998/should-a-session-id-ever-be-sent-over-an-unencrypted-connection" target="_blank" rel="noopener">For Google, the SSIDcookie is marked with the Secure flag</a>. This means that it won’t be sent by the browser over a plain HTTP connection.</p><blockquote><p>[Google] store the important stuff (for example, HSID, NID and SSID) as HTTPonly</p></blockquote><p>However, <strong>(HTTP transfer) may be acceptable for Session IDs that do not allow access to sensitive information</strong>. For example, you may set a cookie so you can let a user add items to their basket. When they proceed to checkout, the insecure session is transferred to secure session over HTTPS. An attacker can only intercept the insecure session and possibly add or change basket items, but once transferred to HTTPS, user can review the basket before placing order. Additionally, all personal details are considered anonymous until the HTTPS checkout is reached.</p><p>Google use non secure and non-http only cookies for items in a similar way.</p><p><a href="http://stackoverflow.com/questions/709085/secure-cookies-and-mixed-https-http-site-usage" target="_blank" rel="noopener">A suggestion is</a>:</p><blockquote><p>you should never trust any content sent over a non-secured connection. privacy is seen as more important than ever, even for actions that aren’t critical to the authentication, such as writing comments, uploading photos, and more.</p></blockquote><blockquote><p>Google announced that HTTPS-only sites will benefit in search engine rankings.</p></blockquote><blockquote><p>So… make the whole site use HTTPS. A few years back this might not have been feasible mainly because of CDNs not providing HTTPS support. However, today it’s mainly a question of balancing development and operational costs.</p></blockquote><h3 id="how-to-manage-session-if-client-disables-cookie"><a href="#how-to-manage-session-if-client-disables-cookie" class="headerlink" title="how to manage session if client disables cookie?"></a>how to manage session if client disables cookie?</h3><p><a href="http://stackoverflow.com/questions/1795998/manage-session-when-broswer-has-disable-cookies" target="_blank" rel="noopener">Two way</a>. First of which is more standard, that is to <strong>pass session id thru URLs</strong>. This requires developer to append session id to EVERY url. eg. </p><pre><code>/path/to/page</code></pre><p>becomes</p><pre><code>/path/to/page?sessionid=ASDFG-ASDFG-ASDFG-ASDFG-ASDFG</code></pre><p>Second way, if to use info in the HTTP header as identifier of the user, i.e: </p><blockquote><p>By combining the Http UserAgent, RemoteIp and RemoteXfip you can get close to uniquely identifying a user, but there is no guarantees that this key is 100% unique.</p></blockquote><h2 id="attacks"><a href="#attacks" class="headerlink" title="attacks"></a>attacks</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. </p><h3 id="Man-in-the-middle-attack"><a href="#Man-in-the-middle-attack" class="headerlink" title="Man-in-the-middle attack"></a>Man-in-the-middle attack</h3><p>Man-in-the-middle attack (MitM) is an attack where the attacker secretly relays and possibly alters the communication between two parties who believe they are directly communicating with each other. </p><h3 id="Session-fixation"><a href="#Session-fixation" class="headerlink" title="Session fixation"></a>Session fixation</h3><p>Session fixation attacks attempt to exploit the vulnerability of a system which allows one person to fixate (set) another person’s session identifier (SID). </p><p>Most session fixation attacks are web based, and most rely on session identifiers being accepted from URLs (query string) or POST data.</p><p>example</p><blockquote><p>Mallory visits <a href="http://vulnerable.example.com/" target="_blank" rel="noopener">http://vulnerable.example.com/</a> and checks which SID is returned. For example, the server may respond: Set-Cookie: SID=0D6441FEA4496C2.</p><p>Mallory is now able to send Alice an e-mail: “Check out this new cool feature on our bank, <a href="http://vulnerable.example.com/?SID=0D6441FEA4496C2.&quot;" target="_blank" rel="noopener">http://vulnerable.example.com/?SID=0D6441FEA4496C2.&quot;</a></p><p>Alice logs on, with fixated session identifier SID=0D6441FEA4496C2.</p><p>Mallory visits <a href="http://vulnerable.example.com/?SID=0D6441FEA4496C2" target="_blank" rel="noopener">http://vulnerable.example.com/?SID=0D6441FEA4496C2</a> and now has unlimited access to Alice’s account.</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python learning notes</title>
      <link href="/2015/05/31/Technology/python-learning/"/>
      <url>/2015/05/31/Technology/python-learning/</url>
      <content type="html"><![CDATA[<h1 id="Python-Basics"><a href="#Python-Basics" class="headerlink" title="Python Basics"></a>Python Basics</h1><p>Python does not use brackets to structure code, instead it uses whitespaces.</p><h2 id="To-define-a-variable"><a href="#To-define-a-variable" class="headerlink" title="To define a variable"></a>To define a variable</h2><p>you do not have to specify the datatype.</p><h2 id="find-the-datatype"><a href="#find-the-datatype" class="headerlink" title="find the datatype:"></a>find the datatype:</h2><pre><code>print type(x)</code></pre><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><pre><code># This is a single line comment&apos;&apos;&apos; This is a multi-line Pythoncomment. &apos;&apos;&apos;</code></pre><h2 id="ask-the-user-for-input"><a href="#ask-the-user-for-input" class="headerlink" title="ask the user for input"></a>ask the user for input</h2><p>using the raw_input function:</p><pre><code>#!/usr/bin/env pythonx = int(raw_input(&quot;Enter x:&quot;))y = int(raw_input(&quot;Enter y:&quot;))sum = x + yprint sum</code></pre><p>In the latest Python version you can use the input() function instead:</p><pre><code>x = int(input(&quot;Enter x:&quot;))</code></pre><h2 id="do-operations-on-strings"><a href="#do-operations-on-strings" class="headerlink" title="do operations on strings:"></a>do operations on strings:</h2><pre><code>s = &quot;Hello Python&quot;print s       # prints whole stringprint s[0]    # prints &quot;H&quot;print s[0:2]  # prints &quot;He&quot;print s[2:4]  # prints &quot;ll&quot;print s[6:]   # prints &quot;Python&quot;print s + &apos; &apos; + s # print concatenated string.print s.replace(&apos;Hello&apos;,&apos;Thanks&apos;) # print a string with a replaced word</code></pre><h3 id="Python-String-compare"><a href="#Python-String-compare" class="headerlink" title="Python String compare"></a>Python String compare</h3><pre><code>sentence = &quot;The cat is brown&quot;q = &quot;cat&quot;if q == sentence:    print &apos;equal&apos;else:    print &apos;not equal&apos;</code></pre><h3 id="Python-String-contains"><a href="#Python-String-contains" class="headerlink" title="Python String contains"></a>Python String contains</h3><pre><code>sentence = &quot;The cat is brown&quot;q = &quot;cat&quot;if q in sentence:    print q + &quot; found in &quot; + sentence</code></pre><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><pre><code>l = [ &quot;Drake&quot;, &quot;Derp&quot;, &quot;Derek&quot;, &quot;Dominique&quot; ]print l     # prints all elementsprint l[0]  # print first elementprint l[1]  # prints second elementl.append(&quot;Victoria&quot;)   # add element.print l                # print all elementsl.remove(&quot;Derp&quot;)       # remove element.l.remove(&quot;Drake&quot;)      # remove element.print l                # print all elements.l.sort()    # sorts the list in alphabetical orderl.reverse() # reverse order.</code></pre><p>iteration: </p><pre><code>items = [ &quot;Abby&quot;,&quot;Brenda&quot;,&quot;Cindy&quot;,&quot;Diddy&quot; ]for item in items:    print item</code></pre><h2 id="A-tuple-is-a-sequence-of-data"><a href="#A-tuple-is-a-sequence-of-data" class="headerlink" title="A tuple is a sequence of data."></a>A tuple is a sequence of data.</h2><p>It is defined as a sequence of elements separated by a comma.</p><pre><code>point = (3,4)point2 = (2,6,12)print pointprint point[0]print point[1]print point2print point2[0]print point2[1]</code></pre><h2 id="A-dictionary"><a href="#A-dictionary" class="headerlink" title="A dictionary"></a>A dictionary</h2><p>is an unordered set of key:</p><pre><code>words = {}words[&quot;Hello&quot;] = &quot;Bonjour&quot;words[&quot;Yes&quot;] = &quot;Oui&quot;words[&quot;No&quot;] = &quot;Non&quot;words[&quot;Bye&quot;] = &quot;Au Revoir&quot;print words            # print key-pairs.del words[&quot;Yes&quot;]       # delete a key-pair.print words            # print key-pairs.words[&quot;Yes&quot;] = &quot;Oui!&quot;  # add new key-pair.print words            # print key-pairs.</code></pre><p>Output:</p><pre><code>{&apos;Yes&apos;: &apos;Oui&apos;, &apos;Bye&apos;: &apos;Au Revoir&apos;, &apos;Hello&apos;: &apos;Bonjour&apos;, &apos;No&apos;: &apos;Non&apos;}{&apos;Bye&apos;: &apos;Au Revoir&apos;, &apos;Hello&apos;: &apos;Bonjour&apos;, &apos;No&apos;: &apos;Non&apos;}{&apos;Yes&apos;: &apos;Oui!&apos;, &apos;Bye&apos;: &apos;Au Revoir&apos;, &apos;Hello&apos;: &apos;Bonjour&apos;, &apos;No&apos;: &apos;Non&apos;}</code></pre><h2 id="Datatype-casting"><a href="#Datatype-casting" class="headerlink" title="Datatype casting"></a>Datatype casting</h2><table style="width:100%; " class="easy-table easy-table-cuscosky "><thead><tr><th>Function</th><th> Description</th></tr></thead><tbody><tr><td>int(x)</td><td> &nbsp;Converts x to an integer</td></tr><tr><td>long(x)</td><td> Converts x to a long integer</td></tr><tr><td>float(x)</td><td> Converts x to a floating point number</td></tr><tr><td>str(x)</td><td> Converts x to an string. &nbsp;x can be of the type float. integer or long.</td></tr><tr><td>hex(x)</td><td> Converts x integer to a hexadecimal string</td></tr><tr><td>chr(x)</td><td> Converts x integer to a character</td></tr><tr><td>ord(x)</td><td> Converts character x to an integer</td></tr></tbody></table><pre><code>x = 3y = 2.15315315313532print &quot;We have defined two numbers,&quot;print &quot;x = &quot; + str(x)print &quot;y = &quot; + str(y)a = &quot;135.31421&quot;b = &quot;133.1112223&quot;c = float(a) + float(b)print c</code></pre><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre><code>print &quot;Guess my age&quot;guess = int(raw_input(&quot;Guess: &quot;))if guess &gt; 10 and guess &lt; 20:    print &quot;In range&quot;else:    print &quot;Out of range&quot;</code></pre><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><pre><code>def doA():    a = 5def doB(a):    print a   # this will workdoB(3)</code></pre><h2 id="For-loop-1"><a href="#For-loop-1" class="headerlink" title="For loop 1"></a>For loop 1</h2><pre><code>items = [ &quot;Abby&quot;,&quot;Brenda&quot;,&quot;Cindy&quot;,&quot;Diddy&quot; ]for item in items:    print item</code></pre><h2 id="For-loop-2"><a href="#For-loop-2" class="headerlink" title="For loop 2"></a>For loop 2</h2><pre><code>for x in range(1,10):    for y in range(1,10):        print &quot;(&quot; + str(x) + &quot;,&quot; + str(y) + &quot;)&quot;</code></pre><h2 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h2><pre><code>while button_not_pressed:     drive()</code></pre><h1 id="Python-OOP"><a href="#Python-OOP" class="headerlink" title="Python OOP"></a>Python OOP</h1><h2 id="class-in-Python"><a href="#class-in-Python" class="headerlink" title="class in Python"></a>class in Python</h2><pre><code>class User:    name = &quot;&quot;    def __init__(self, name):        self.name = name    def sayHello(self):        print &quot;Hello, my name is &quot; + self.name# create virtual objectsjames = User(&quot;James&quot;)david = User(&quot;David&quot;)eric = User(&quot;Eric&quot;)# call methods owned by virtual objectsjames.sayHello()david.sayHello()</code></pre><h2 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h2><pre><code>class User:    name = &quot;&quot;    def __init__(self, name):        self.name = name    def printName(self):        print &quot;Name  = &quot; + self.nameclass Programmer(User):    def __init__(self, name):        self.name = name    def doPython(self):        print &quot;Programming Python&quot;brian = User(&quot;brian&quot;)brian.printName()diana = Programmer(&quot;Diana&quot;)diana.printName()diana.doPython()</code></pre><h2 id="polymorphism"><a href="#polymorphism" class="headerlink" title="polymorphism"></a>polymorphism</h2><pre><code>class Bear(object):def sound(self):    print &quot;Groarrr&quot;class Dog(object):def sound(self):    print &quot;Woof woof!&quot;def makeSound(animalType):animalType.sound()bearObj = Bear()dogObj = Dog()makeSound(bearObj)makeSound(dogObj)</code></pre><h2 id="polymorphism-with-abstract-class"><a href="#polymorphism-with-abstract-class" class="headerlink" title="polymorphism with abstract class"></a>polymorphism with abstract class</h2><pre><code>class Document:    def __init__(self, name):        self.name = name    def show(self):        raise NotImplementedError(&quot;Subclass must implement abstract method&quot;)class Pdf(Document):    def show(self):        return &apos;Show pdf contents!&apos;class Word(Document):    def show(self):        return &apos;Show word contents!&apos;documents = [Pdf(&apos;Document1&apos;),             Pdf(&apos;Document2&apos;),             Word(&apos;Document3&apos;)]for document in documents:    print document.name + &apos;: &apos; + document.show()</code></pre><p>Output:</p><pre><code>Document1: Show pdf contents!Document2: Show pdf contents!Document3: Show word contents!</code></pre><h2 id="another-example"><a href="#another-example" class="headerlink" title="another example"></a>another example</h2><p>of abstract class:</p><pre><code>class Car:    def __init__(self, name):        self.name = name    def drive(self):        raise NotImplementedError(&quot;Subclass must implement abstract method&quot;)    def stop(self):        raise NotImplementedError(&quot;Subclass must implement abstract method&quot;)class Sportscar(Car):    def drive(self):        return &apos;Sportscar driving!&apos;    def stop(self):        return &apos;Sportscar breaking!&apos;class Truck(Car):    def drive(self):        return &apos;Truck driving slowly because heavily loaded.&apos;    def stop(self):        return &apos;Truck breaking!&apos;cars = [Truck(&apos;Bananatruck&apos;),        Truck(&apos;Orangetruck&apos;),        Sportscar(&apos;Z3&apos;)]for car in cars:    print car.name + &apos;: &apos; + car.drive()</code></pre><p>Output:</p><pre><code>Bananatruck: Truck driving slowly because heavily loaded.Orangetruck: Truck driving slowly because heavily loaded.Z3: Sportscar driving!</code></pre><p>Reference: <a href="https://pythonspot.com/beginner/" target="_blank" rel="noopener">Python Beginner by pythonspot.com</a></p><h1 id="Python-tricks"><a href="#Python-tricks" class="headerlink" title="Python tricks"></a>Python tricks</h1><h2 id="start-a-simple-HTTP-server"><a href="#start-a-simple-HTTP-server" class="headerlink" title="start a simple HTTP server:"></a>start a simple HTTP server:</h2><pre><code>python -m SimpleHTTPServer</code></pre><h2 id="Using-Zip"><a href="#Using-Zip" class="headerlink" title="Using Zip"></a>Using Zip</h2><p>to combine arrays</p><pre><code>&gt;&gt;&gt; b = [[1, 2, 3, 4], [6, 5, 4, 3]]&gt;&gt;&gt; zip(*b)[(1, 6), (2, 5), (3, 4), (4, 3)]</code></pre><h2 id="We-know-that-“array-reverse-”-will-reverse-an-array"><a href="#We-know-that-“array-reverse-”-will-reverse-an-array" class="headerlink" title="We know that “array.reverse()” will reverse an array."></a>We know that “array.reverse()” will reverse an array.</h2><p>How do we reverse a string?</p><pre><code>&gt;&gt;&gt; s = &quot;Hello world&quot;&gt;&gt;&gt; s = s[::-1]&gt;&gt;&gt; print sdlrow olleH</code></pre><h2 id="Swapping-variables"><a href="#Swapping-variables" class="headerlink" title="Swapping variables"></a>Swapping variables</h2><pre><code>&gt;&gt;&gt; a = 1&gt;&gt;&gt; b = 3&gt;&gt;&gt; b,a = a,b&gt;&gt;&gt; print a3&gt;&gt;&gt; print b1</code></pre><p>Reference: <a href="https://pythonspot.com/fun-tricks-with-python/" target="_blank" rel="noopener">Fun tricks with Python, pythonspot.com</a></p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP learning notes</title>
      <link href="/2015/05/31/Technology/php-learning/"/>
      <url>/2015/05/31/Technology/php-learning/</url>
      <content type="html"><![CDATA[<h1 id="PHP-language"><a href="#PHP-language" class="headerlink" title="PHP language"></a>PHP language</h1><h2 id="web-server-must-have-a-php-server"><a href="#web-server-must-have-a-php-server" class="headerlink" title="web server must have a php server"></a>web server must have a php server</h2><p>web server: Apache, IIS, Tomcat, JBoss, WebLogic…</p><p>app server: Jsp, PHP, Asp…</p><p>we also need database, but does need to be at same machine as web/app server.</p><h2 id="A-Comparison"><a href="#A-Comparison" class="headerlink" title="A Comparison"></a>A Comparison</h2><p>Linux   +  Apache  + MySql      +  PHP  =  LAMP      - open sourced, dev speed fastest</p><p>Unix    +  Tomcat  + Oracle     +  JSP  =  J2EE      - most expensive</p><p>Windows +  IIS     + SQL server +  ASP  =  ASP.net   - virus risks, very not safe</p><h2 id="To-get-information-from-POST-form"><a href="#To-get-information-from-POST-form" class="headerlink" title="To get information from POST form"></a>To get information from POST form</h2><pre><code>Hi &lt;?php echo htmlspecialchars($_POST[&apos;name&apos;]); ?&gt;.You are &lt;?php echo (int)$_POST[&apos;age&apos;]; ?&gt; years old.</code></pre><h2 id="Superglobals"><a href="#Superglobals" class="headerlink" title="Superglobals"></a>Superglobals</h2><p>build-in variables that are always available in all scopes. like:</p><ol><li><p>$GLOBALS, variables available in global scope</p><pre><code>&lt;?phpfunction test() {    $foo = &quot;local variable&quot;;    echo &apos;$foo in global scope: &apos; . $GLOBALS[&quot;foo&quot;] . &quot;\n&quot;;    echo &apos;$foo in current scope: &apos; . $foo . &quot;\n&quot;;}$foo = &quot;Example content&quot;;test();?&gt;</code></pre></li><li><p>$_SERVER, Server and execution environment information</p><pre><code>&lt;?phpecho $_SERVER[&apos;SERVER_NAME&apos;];?&gt;</code></pre></li><li><p>$_GET, GET variables</p><pre><code>&lt;?phpecho &apos;Hello &apos; . htmlspecialchars($_GET[&quot;name&quot;]) . &apos;!&apos;;?&gt;</code></pre></li><li><p>$_POST, POST variables</p><pre><code>&lt;?phpecho &apos;Hello &apos; . htmlspecialchars($_POST[&quot;name&quot;]) . &apos;!&apos;;?&gt;</code></pre></li><li><p>$_FILES, File Upload variables</p></li><li>$_COOKIE</li><li>$_SESSION</li><li><p>$_REQUEST</p><p> The PHP $_REQUEST variable contains the contents of both $_GET, $_POST, and $_COOKIE.</p></li><li><p>$_ENV, Environment variables</p><p> These variables are imported into PHP’s global namespace from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running.</p></li></ol><h2 id="php-code-to-print-a-variable"><a href="#php-code-to-print-a-variable" class="headerlink" title="php code to print a variable:"></a>php code to print a variable:</h2><pre><code>&lt;html&gt;        &lt;body&gt;        &lt;?php        $capital = 67;        print(&quot;Variable capital is $capital&lt;br&gt;&quot;);        print(&quot;Variable CaPiTaL is $CaPiTaL&lt;br&gt;&quot;);        ?&gt;        &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><p>in PHP does a regex match.</p><h2 id="include-and-require"><a href="#include-and-require" class="headerlink" title="include() and require()"></a>include() and require()</h2><p><strong>The include() function</strong> takes all the text in a specified file and copies it into the file that uses the include function.</p><p><strong>The require() function</strong> takes all the text in a specified file and copies it into the file that uses the include function. If there is any problem in loading a file then the require() function <strong>generates a fatal error and halt the execution of the script</strong>.</p><h2 id="a-list-of-PHP-Predefined-Variables"><a href="#a-list-of-PHP-Predefined-Variables" class="headerlink" title="a list of PHP - Predefined Variables"></a>a list of PHP - Predefined Variables</h2><p>can be found here:</p><p><a href="http://www.tutorialspoint.com/php/php_predefined_variables.htm" target="_blank" rel="noopener">http://www.tutorialspoint.com/php/php_predefined_variables.htm</a></p><h2 id="define-a-error-handling-function"><a href="#define-a-error-handling-function" class="headerlink" title="define a error-handling function:"></a>define a error-handling function:</h2><pre><code>error_function(error_level, error_messag, error_file,error_line, error_context);</code></pre><h1 id="PHP-OOP"><a href="#PHP-OOP" class="headerlink" title="PHP OOP"></a>PHP OOP</h1><h2 id="PHP-Classes"><a href="#PHP-Classes" class="headerlink" title="PHP Classes"></a>PHP Classes</h2><pre><code>&lt;?phpclass  Books{    /* Member variables */    var $price;    var $title;    /* Member functions */    function setPrice($par){       $this-&gt;price = $par;    }    function getPrice(){       echo $this-&gt;price .&quot;&lt;br/&gt;&quot;;    }    function setTitle($par){       $this-&gt;title = $par;    }    function getTitle(){       echo $this-&gt;title .&quot; &lt;br/&gt;&quot;;    }}?&gt;</code></pre><h2 id="Creating-Objects"><a href="#Creating-Objects" class="headerlink" title="Creating Objects"></a>Creating Objects</h2><pre><code>$physics = new Books( &quot;Physics for High School&quot;, 10 );$maths = new Books;$chemistry = new Books;$physics-&gt;setTitle( &quot;Physics for High School&quot; );$maths-&gt;setTitle( &quot;Algebra&quot; );$chemistry-&gt;setTitle( &quot;Advanced Chemistry&quot; );</code></pre><h2 id="Public-and-Private-members"><a href="#Public-and-Private-members" class="headerlink" title="Public and Private members"></a>Public and Private members</h2><p>Unless you specify otherwise, properties and methods of a class are public.</p><p>If you wish to limit the accessibility of the members of a class then you define class members as private or protected.</p><pre><code>class MyClass {   private $car = &quot;skoda&quot;;   $driver = &quot;SRK&quot;;   function __construct($par) {      // Statements here run every time      // an instance of the class      // is created.   }   function myPublicFunction() {      return(&quot;I&apos;m visible!&quot;);   }   private function myPrivateFunction() {      return(&quot;I&apos;m  not visible outside!&quot;);   }}</code></pre><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><pre><code>interface Mail {   public function sendMail();}class Report implements Mail {   // sendMail() Definition goes here}</code></pre><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p>constant’s name does not have a leading $, as variable names do.</p><pre><code>class MyClass {   const requiredMargin = 1.7;   function __construct($incomingValue) {      // Statements here run every time      // an instance of the class      // is created.   }}</code></pre><h2 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h2><p>When inheriting from an abstract class, all methods marked abstract in the parent’s class declaration must be defined by the child.</p><p>It is not legal to have abstract function definitions inside a non-abstract class.</p><pre><code>abstract class MyAbstractClass {   abstract function myAbstractFunction() {   }}</code></pre><h2 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h2><p>A member declared as static can not be accessed with an instantiated class object (though a static method can).</p><pre><code>&lt;?phpclass Foo{    public static $my_static = &apos;foo&apos;;    public function staticValue() {        return self::$my_static;    }}print Foo::$my_static . &quot;\n&quot;;$foo = new Foo();print $foo-&gt;staticValue() . &quot;\n&quot;;</code></pre><h2 id="Final-Keyword"><a href="#Final-Keyword" class="headerlink" title="Final Keyword"></a>Final Keyword</h2><p>Prefixing the method definition with final prevents child classes from overriding.</p><p>If the class itself is being defined final then it cannot be extended.</p><h2 id="Calling-parent-constructors"><a href="#Calling-parent-constructors" class="headerlink" title="Calling parent constructors"></a>Calling parent constructors</h2><p>The constructor of NameSub1 functions by calling its parent constructor explicitly using the :: syntax.</p><pre><code>class Name{   var $_firstName;   var $_lastName;   function Name($first_name, $last_name)   {     $this-&gt;_firstName = $first_name;     $this-&gt;_lastName = $last_name;   }   function toString() {     return($this-&gt;_lastName .&quot;, &quot; .$this-&gt;_firstName);   }}class NameSub1 extends Name{   var $_middleInitial;   function NameSub1($first_name, $middle_initial, $last_name) {       Name::Name($first_name, $last_name);       $this-&gt;_middleInitial = $middle_initial;   }   function toString() {       return(Name::toString() . &quot; &quot; . $this-&gt;_middleInitial);   }}</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://php.net/" target="_blank" rel="noopener">http://php.net/</a></p><p><a href="http://www.tutorialspoint.com/php/index.htm" target="_blank" rel="noopener">http://www.tutorialspoint.com/php/index.htm</a></p><p><a href="http://www.w3schools.com/php/" target="_blank" rel="noopener">http://www.w3schools.com/php/</a></p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Regular Expression Learning Notes</title>
      <link href="/2015/05/24/Technology/regex/"/>
      <url>/2015/05/24/Technology/regex/</url>
      <content type="html"><![CDATA[<ol><li><p>\d    any Digit</p></li><li><p>.    any Character</p></li><li><p>.    Period</p></li><li><p>[abc]    Only a, b, or c</p></li><li><p>[^abc]    Not a, b, nor c</p></li><li><p>[a-z]    Characters a to z</p></li><li><p>[0-9]    Numbers 0 to 9</p></li><li><p>{m}    m Repetitions</p></li><li><p>{m,n}    m to n Repetitions</p><p> eg. a{1,} means <strong>&gt;=1 occurance of a</strong></p></li><li><p>*    Zero or more repetitions</p></li><li><p>+    One or more repetitions</p><p> eg. [abc]+ means <strong>&gt;=1 occurance of a or b or c</strong></p></li><li><p>?    Optional</p><p> eg. ab?c matches <strong>abc or ac</strong></p></li><li><p>\s    any Whitespace</p></li><li><p>\t    any tab</p></li><li><p>\n    any new line</p></li><li><p>^…$    Starts and ends</p></li><li><p>()    capture Group</p></li><li><p>(a(bc))    capture Sub group</p><p> eg. ^(IMG\d+).png$ matches <strong>an image file name</strong></p></li><li><p>(.*)    capture Variable content</p></li><li><p>(a|b)    Matchs a or b</p></li><li><p>metacharacters</p><ol><li><p>\w    any Alphanumeric character</p></li><li><p>\W    any Non-alphanumeric character</p></li><li><p>\d    any Digit</p></li><li><p>\D    any Non-digit character</p></li><li><p>\s    any Whitespace</p></li><li><p>\S    any Non-whitespace character</p></li></ol></li><li><p>Last but not least: <strong>.* matches anything</strong></p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH keys setup for GitHub</title>
      <link href="/2015/05/14/Technology/ssh-keys-github/"/>
      <url>/2015/05/14/Technology/ssh-keys-github/</url>
      <content type="html"><![CDATA[<h1 id="Setup-for-the-first-Github"><a href="#Setup-for-the-first-Github" class="headerlink" title="Setup for the first Github"></a>Setup for the first Github</h1><p>This is the standard procedure for generating SSH and connect to GitHub:</p><p>check current SSH:</p><pre><code>ls -al ~/.ssh</code></pre><p>generate new:</p><pre><code>ssh-keygen -t rsa -b 4096 -C &quot;theimmortalfish@gmail.com&quot;</code></pre><p>(-t for type, -b for number of bits, -C for comment)</p><p><strong>then press Enter</strong>, then set passphrase.</p><p>set SSH-agent:</p><pre><code>eval &quot;$(ssh-agent -s)&quot;ssh-add ~/.ssh/id_rsa</code></pre><p>add SSH to GitHub:</p><pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub</code></pre><p>put it into GitHub settings</p><p>test SSH:</p><pre><code>ssh -T git@github.com</code></pre><h1 id="Setup-for-the-second-Github"><a href="#Setup-for-the-second-Github" class="headerlink" title="Setup for the second Github"></a>Setup for the second Github</h1><h2 id="generate-a-second-SSH-key"><a href="#generate-a-second-SSH-key" class="headerlink" title="generate a second SSH key"></a>generate a second SSH key</h2><p>Same steps untli the “<strong>then press Enter</strong>“, we’ll instead give it another name like “id_rsa_fish”:</p><pre><code>Fishs-MacBook-Pro:.ssh Fish$ ssh-keygen -t rsa -b 4096 -C &quot;theimmortalfish@gmail.com&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/Fish/.ssh/id_rsa): id_rsa_fishEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in id_rsa_fish.Your public key has been saved in id_rsa_fish.pub.The key fingerprint is:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx theimmortalfish@gmail.comThe key&apos;s randomart image is:+--[ RSA 4096]----+|       xxxxx     ||       xxxxx     ||       xxxxx     ||       xxxxx     ||       xxxxx     ||       xxxxx     ||       xxxxx     ||       xxxxx     ||       xxxxx     |+-----------------+Fishs-MacBook-Pro:.ssh Fish$ ls -al ~/.ssh/total 40drwx------   7 Fish  staff   238 May 14 12:43 .drwxr-xr-x+ 45 Fish  staff  1530 May 13 23:01 ..-rw-------   1 Fish  staff  1766 Jul 28  2014 id_rsa-rw-r--r--   1 Fish  staff   402 Jul 28  2014 id_rsa.pub-rw-------   1 Fish  staff  3326 May 14 12:43 id_rsa_fish-rw-r--r--   1 Fish  staff   751 May 14 12:43 id_rsa_fish.pub-rw-r--r--   1 Fish  staff  2828 May 13 22:47 known_hosts</code></pre><p>Again, we’ll do</p><pre><code>eval &quot;$(ssh-agent -s)&quot;ssh-add ~/.ssh/id_rsa_fish</code></pre><p>And also, add public key to the second GitHub account. </p><h2 id="SSH-configuration"><a href="#SSH-configuration" class="headerlink" title="SSH configuration"></a>SSH configuration</h2><p>Now this is the key step: go to .ssh folder and <strong>create a config file</strong>: </p><pre><code>touch config</code></pre><p>And put in the following configuration:</p><pre><code>Host github-old  HostName github.com  User git  IdentityFile ~/.ssh/id_rsaHost github.com  HostName github.com  User git  IdentityFile ~/.ssh/id_rsa_fish</code></pre><p>Depending on your preference, change one of the host from “github.com” to some other names. In my case, I give the name “github-old” to my first SSH, and the second one would just stay the same (cuz I use the second GitHub more frequently). </p><p>The next step is the most important!</p><h2 id="configure-ssh-agent"><a href="#configure-ssh-agent" class="headerlink" title="configure ssh-agent"></a>configure ssh-agent</h2><p>Now restart your ssh-agent:</p><pre><code>killall ssh-agent; eval `ssh-agent -s`</code></pre><p>Now if you give it a try, you notice something fishy:</p><pre><code>ssh -T git@github.comssh -T git@github-old</code></pre><p>You notice that only the default SSH key (id_rsa) is being used. You are essentially querying the same GitHub account. </p><p><strong>This is wrong</strong>. Because we have not added both SSH keys to ssh-agent yet. Immediately, do this: </p><pre><code>ssh-add ~/.ssh/id_rsa_fishssh-add ~/.ssh/id_rsa</code></pre><p>Now if you test connection again, you shall see no problem. </p><h2 id="Last-step-change-remote-url"><a href="#Last-step-change-remote-url" class="headerlink" title="Last step, change remote url"></a>Last step, change remote url</h2><p>The last step is to make changes to the git repository so that your computer works with both GitHub account. </p><p>Whenever we clone or “remote add origin”, we shall replace “github-old” with “github.com” in the remote url. </p><p>Example: go to your first GitHub account and create a new repo called “hello”. Then,</p><pre><code>mkdir hellocd hellogit initgit remote add origin git@github-old:old-name/hello.gittouch testing-file.txtgit add .git commit -m &apos;first commit&apos;git push origin master</code></pre><p>You should see it works fine. Notice how we changed the remote url from “github.com” to “github-old”, which matches our host configuration in the .ssh folder. </p><p>Your second GitHub shall work just like a normal GitHub account. 3 hours of hard work, all done! </p><p>Thanks to <a href="http://code.tutsplus.com/tutorials/how-to-work-with-github-and-multiple-accounts--net-22574" target="_blank" rel="noopener">Jeffrey Way from tutsplus.com</a> for the nice tutorial. </p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx tutorial</title>
      <link href="/2015/04/30/Technology/nginx/"/>
      <url>/2015/04/30/Technology/nginx/</url>
      <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>nginx [engine x] is <strong>an HTTP and reverse proxy server</strong>, a mail proxy server, and a generic TCP proxy server. </p><p>For a long time, it has been running on many heavily loaded Russian sites, and recently, Netflix, Wordpress.com. </p><p>Ref: <a href="http://nginx.org/en/" target="_blank" rel="noopener">nginx</a></p><p><strong>nginx has one master process and several worker processes</strong>. The main purpose of the master process is to read and evaluate configuration, and maintain worker processes. Worker processes do actual processing of requests. </p><h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><h2 id="start-nginx"><a href="#start-nginx" class="headerlink" title="start nginx"></a>start nginx</h2><pre><code>nginx</code></pre><h2 id="stop-nginx"><a href="#stop-nginx" class="headerlink" title="stop nginx"></a>stop nginx</h2><pre><code>nginx -s signal</code></pre><p>signal: </p><ol><li><p>stop — fast shutdown</p></li><li><p>quit — graceful shutdown</p></li><li><p>reload — reloading the configuration file</p></li><li><p>reopen — reopening the log files</p></li></ol><h2 id="List-of-running-nginx-process"><a href="#List-of-running-nginx-process" class="headerlink" title="List of running nginx process"></a>List of running nginx process</h2><pre><code>ps -ax | grep nginx</code></pre><h1 id="config-file：-nginx-conf"><a href="#config-file：-nginx-conf" class="headerlink" title="config file： nginx.conf"></a>config file： nginx.conf</h1><p><strong>nginx.conf</strong></p><p>By default, the configuration file is placed in <strong>/etc/nginx</strong>. (If not, check /usr/local/nginx/conf, or /usr/local/etc/nginx.)</p><h2 id="first-part"><a href="#first-part" class="headerlink" title="first part"></a>first part</h2><pre><code>user www-data;worker_processes 4;pid /run/nginx.pid;events {    worker_connections 768;    # multi_accept on;}</code></pre><ol><li><p>user</p><p> Defines which Linux system user will own and run the Nginx server. Most Debian-based distributions use www-data</p><p> In case you run two simultaneous web servers, or need another program’s user to have control over Nginx, you can play with it.</p></li><li><p>worker_process</p><p> Defines how many threads, or simultaneous instances, of Nginx to run. </p></li><li><p>pid</p><p> Defines where Nginx will write its master process ID, or PID. </p><blockquote><p>On my machine, the file /run/nginx.pid store a single number 724. </p></blockquote></li></ol><h2 id="http-part"><a href="#http-part" class="headerlink" title="http part"></a>http part</h2><pre><code>http {    ##    # Basic Settings    ##    sendfile on;    tcp_nopush on;    tcp_nodelay on;    keepalive_timeout 65;    types_hash_max_size 2048;    # server_tokens off;    # server_names_hash_bucket_size 64;    # server_name_in_redirect off;    include /etc/nginx/mime.types;    default_type application/octet-stream;    ##    # Logging Settings    ##    access_log /var/log/nginx/access.log;    error_log /var/log/nginx/error.log;    ##    # Gzip Settings    ##    gzip on;    gzip_disable &quot;msie6&quot;;    # gzip_vary on;    # gzip_proxied any;    # gzip_comp_level 6;    # gzip_buffers 16 8k;    # gzip_http_version 1.1;    # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;    ##    # nginx-naxsi config    ##    # Uncomment it if you installed nginx-naxsi    ##    #include /etc/nginx/naxsi_core.rules;    ##    # nginx-passenger config    ##    # Uncomment it if you installed nginx-passenger    ##    #passenger_root /usr;    #passenger_ruby /usr/bin/ruby;    ##    # Virtual Host Configs    ##    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;}</code></pre><p>Note: The HTTP block of the nginx.conf file contains the statement include <strong>/etc/nginx/sites-enabled/*;</strong>. This allows for server block configurations to be loaded in from separate files found in <strong>the sites-enabled sub-directory</strong>. </p><p>Usually these are <strong>symlinks to files stored in /etc/nginx/sites-available/</strong>. By using symlinks you can quickly enable or disable a virtual server while preserving its configuration file. </p><h1 id="config-file-for-sites"><a href="#config-file-for-sites" class="headerlink" title="config file for sites"></a>config file for sites</h1><h2 id="sites-available"><a href="#sites-available" class="headerlink" title="sites-available"></a>sites-available</h2><p><strong>/etc/nginx/sites-available/default</strong> is a template provided for you. </p><pre><code>server {        listen 80 default_server;        listen [::]:80 default_server ipv6only=on;        root /usr/share/nginx/html;        index index.html index.htm;        # Make site accessible from http://localhost/        server_name localhost;        location / {                # First attempt to serve request as file, then                # as directory, then fall back to displaying a 404.                try_files $uri $uri/ /index.html;                # Uncomment to enable naxsi on this location                # include /etc/nginx/naxsi.rules        }}</code></pre><p><strong>Do not modify this file</strong>. Generally, you’ll want to make a separate file with its own server block for each virtual domain on your server.  So do: </p><pre><code>cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com</code></pre><h2 id="listen-directive"><a href="#listen-directive" class="headerlink" title="listen directive"></a>listen directive</h2><pre><code>listen 80 default_server;listen [::]:80 default_server ipv6only=on;</code></pre><p>The argument <strong>default_server</strong> means this virtual host will answer requests on port 80 that don’t match any other virtual host’s listen statement. </p><p>The second statement listens over IPv6 and behaves in the same way.</p><pre><code>listen     127.0.0.1:80;listen     localhost:80;</code></pre><p>Note: localhost is conventionally set as the hostname for 127.0.0.1 in /etc/hosts.</p><pre><code>listen     80;listen     *:80;</code></pre><p>This will listen on all domains and IP addresses on port 80. <strong>listen 80;</strong> is equivalent to <strong>listen *:80;</strong></p><pre><code>listen     12.34.56.77:80;listen     12.34.56.78:80;listen     12.34.56.79:80;       listen     12.34.56.79:8080;       </code></pre><p>This will listen on multiple IP/port. </p><h2 id="server-name-directive"><a href="#server-name-directive" class="headerlink" title="server_name directive"></a>server_name directive</h2><p>Common:</p><pre><code>server_name   example.com;</code></pre><p>Or</p><pre><code>server_name   example.com www.example.com;</code></pre><p>Now this:</p><pre><code>server_name   *.example.com;server_name   .example.com;</code></pre><p>will listen to all subdomains of example.com, including <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a>, foo.example.com, etc. <strong>Both equivalent</strong>.</p><pre><code>server_name   &quot;&quot;;</code></pre><p>If you set server_name to the empty quote set (”“), Nginx will process <strong>all requests that either</strong> do not have a hostname, <strong>or</strong> that have an unspecified hostname, such as requests for the IP address itself.</p><h2 id="location-directive"><a href="#location-directive" class="headerlink" title="location directive"></a>location directive</h2><p><strong>location</strong> setting lets you configure how Nginx will respond to requests for resources within the server.</p><p>eg. </p><pre><code>location / { } location /images/ { } location /blog/ { } location /planet/ { } location /planet/blog/ { }</code></pre><p>The location can set actual path in the file system (that is under /etc/nginx/ folder). Or we can also set <strong>proxy_pass</strong> directive. </p><p>Ref 1: <a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">nginx Beginner’s Guide</a></p><p>Ref 2: <a href="https://www.linode.com/docs/websites/nginx/basic-nginx-configuration#location-root-and-index" target="_blank" rel="noopener">Basic Nginx Configuration by Linode</a></p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux Directory Structure</title>
      <link href="/2015/04/28/Technology/linux-directory/"/>
      <url>/2015/04/28/Technology/linux-directory/</url>
      <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="a-brief-introduction"><a href="#a-brief-introduction" class="headerlink" title="a brief introduction"></a>a brief introduction</h2><ol><li>bin - user binary</li><li>boot - boot loader</li><li>dev - device (manipulate your hard drives)</li><li>etc - config files</li><li>home - user home dir except root</li><li>initrd.img </li><li>lib - system library</li><li>lib64</li><li>lost+found</li><li>media - removable devices (CD, USB etc)</li><li>mnt - mount file systems</li><li>opt - optional (eg. desktop environment)</li><li>proc - process info</li><li>root - root user’s home</li><li>run</li><li>sbin - system binary (runnable only by root)</li><li>srv - service data</li><li>sys</li><li>tmp - temporary (delete on restart)</li><li>usr - Unix System Resources (user programs)<ol><li>usr/bin - user programs</li><li>usr/lib - user system lib</li><li>usr/local -  programs that’s <strong>manually compiled</strong> rather than install from package</li><li>usr/sbin - root programs</li></ol></li><li>var - variables, application data (eg. MySQL db, cached files)</li></ol><p>Reference: <cite>Linux Directory Structure (File System Structure) Explained with Examples</cite><a href="http://www.thegeekstuff.com/2010/09/linux-file-system-structure/" target="_blank" rel="noopener">1</a></p><h1 id="Some-important-folders"><a href="#Some-important-folders" class="headerlink" title="Some important folders"></a>Some important folders</h1><h2 id="bin-sbin-usr-bin-usr-sbin"><a href="#bin-sbin-usr-bin-usr-sbin" class="headerlink" title="bin, sbin, usr/bin, usr/sbin"></a>bin, sbin, usr/bin, usr/sbin</h2><p><strong>bin/</strong> stores commands needed during boot-up that might be needed by normal users. eg. cat, tar…</p><blockquote><p>Applications <strong>such as Firefox</strong> are stored in /usr/bin, while important system programs and utilities such as the <strong>bash shell</strong> are located in /bin. </p></blockquote><p><strong>sbin/</strong> is like bin but commands are not intended for normal users. Commands run by LINUX. eg. ifconfig, fdisk…</p><p><strong>/usr/bin</strong> is all user commands, while <strong>/usr/sbin</strong> is system admin commands not needed on the root filesystem. e.g. most server programs.</p><h2 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h2><p>This filesystem is not on a disk. Exists in the kernels imagination (virtual). </p><p>It holds information about kernel parameters and system configuration.</p><h2 id="usr"><a href="#usr" class="headerlink" title="usr"></a>usr</h2><p><strong>/usr</strong> usually contains by far the largest share of data on a system. Hence, this is <a href="http://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html" target="_blank" rel="noopener">one of the most important directories</a> in the system as it contains all the <strong>user binaries, their documentation, libraries, header files</strong>, etc…. </p><p>Reference: <a href="http://www.comptechdoc.org/os/linux/usersguide/linux_ugfilestruct.html" target="_blank" rel="noopener">Linux Directory Structure</a></p><h1 id="A-brief-history"><a href="#A-brief-history" class="headerlink" title="A brief history"></a>A brief history</h1><blockquote><p>Originally, there was /bin for programs, /dev for device files and /lib for extra executable code and /usr for user data. </p></blockquote><blockquote><p>The source code was also often provided somewhere under /usr.</p></blockquote><blockquote><p>And there were a few files in the operating system that didn’t fit in any of the existing categories. This included <strong>a passwd file containing users’ passwords</strong>, and <strong>an mtab file written by mount</strong>. </p></blockquote><blockquote><p>At first, there was no connotation that files in <strong>/etc</strong> were configuration files. In these very early days, if you wanted to customize something, you’d be recompiling that part of the system. As Unix got more powerful, there were more and more things you could do without recompiling. As Unix got used more widely, there were more and more things people wanted to do, and they found ways of doing them without going through the trouble of recompiling. </p></blockquote><blockquote><p>So <strong>/etc</strong> filled up with more and more text files that people could and did customize, hence it gradually became the configuration directory.</p></blockquote><blockquote><p>With the creation of <strong>/sbin</strong> to contain programs intended only for the system administrator, <strong>/etc</strong> ended up containing only text files, many of which can be customized by the system administrator. </p></blockquote><p>Reference: <a href="http://unix.stackexchange.com/a/56172" target="_blank" rel="noopener">Answer by Gilles on StackExchange</a></p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Quick setup guide of Ghost on VPS</title>
      <link href="/2015/04/27/Technology/ghost-guide-vps/"/>
      <url>/2015/04/27/Technology/ghost-guide-vps/</url>
      <content type="html"><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>Recently I figured <a href="https://ghost.org/" target="_blank" rel="noopener"><strong>Ghost</strong>, just a blogging platform</a> a pretty cool stuff. </p><p>So I got myself a free account from a VPS provider with Ubuntu 14.04 installed and jumped right in. </p><h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><h2 id="download-and-install"><a href="#download-and-install" class="headerlink" title="download and install"></a>download and install</h2><pre><code>wget https://ghost.org/zip/ghost-latest.zipunzip -d ghost-folder ghost-zip</code></pre><h2 id="set-dependency"><a href="#set-dependency" class="headerlink" title="set dependency"></a>set dependency</h2><pre><code>ch ghost-foldersudo npm install —-production</code></pre><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><pre><code>cp config.example.js config.js  nano config.js</code></pre><p>Now change the url of production to the public IP or domain name. </p><h2 id="start-ghost"><a href="#start-ghost" class="headerlink" title="start ghost"></a>start ghost</h2><pre><code>npm start —-production</code></pre><h1 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h1><p>to be continued..</p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git Learning Notes</title>
      <link href="/2015/04/26/Technology/git-tutorial/"/>
      <url>/2015/04/26/Technology/git-tutorial/</url>
      <content type="html"><![CDATA[<h1 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h1><p><strong>Remote connections are more like bookmarks</strong>. </p><p>git remote command is really just an easier way to pass URLs.</p><p>When you clone a repository with git clone, it automatically creates a remote connection called <strong>origin</strong>.</p><h1 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h1><p>The git fetch command imports commits from a remote repository into your local repo</p><p>The resulting commits are <strong>stored as remote branches</strong> instead of the normal local branches</p><p>Fetching is what you do when you want to see what everybody else has been working on. Since fetched content is represented as a remote branch, it has absolutely no effect on your local development work.</p><h2 id="Remote-branches"><a href="#Remote-branches" class="headerlink" title="Remote branches"></a>Remote branches</h2><p>Remote branches are just like local branches, except they represent commits from somebody else’s repository. You can check out a remote branch just like a local one, but this <strong>puts you in a detached HEAD state</strong> (just like checking out an old commit). You can think of them as <strong>read-only branches</strong>.</p><h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><p>This is the same as </p><pre><code>git fetch &lt;remote&gt; </code></pre><p>followed by </p><pre><code>git merge origin/&lt;current-branch&gt;</code></pre><h2 id="alternative"><a href="#alternative" class="headerlink" title="alternative"></a>alternative</h2><pre><code>git pull --rebase &lt;remote&gt; (eg. git pull --rebase origin)</code></pre><p>Same as the above command, but <strong>instead of using git merge</strong> to integrate the remote branch with the local one, use <strong>git rebase</strong>.</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p>–rebase option can be used to ensure a linear history by preventing unnecessary merge commits.</p><p>In fact, pulling with –rebase is such a common workflow that there is a dedicated configuration option for it:</p><pre><code>git config --global branch.autosetuprebase always</code></pre><h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><p>After you’re ready to share your commits with others, you (optionally) <strong>clean them up with an interactive rebase</strong>, then push them to the central repository.</p><p>You should only push to repositories that have been created with the <strong>–bare flag</strong>. It’s important to <strong>never push to another developer’s repository</strong>.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>The following example describes one of the <strong>standard methods</strong> for publishing local contributions to the central repository.</p><pre><code>git checkout mastergit fetch origin mastergit rebase -i origin/master# Squash commits, fix up commit messages etc.git push origin master</code></pre><p>reference: <a href="https://www.atlassian.com/git/tutorials/syncing" target="_blank" rel="noopener">Atlassian Tutorials on Git</a></p><h1 id="Pull-request"><a href="#Pull-request" class="headerlink" title="Pull request"></a>Pull request</h1><p><strong>pull requests</strong> are a mechanism for a developer to notify team members that they have completed a feature. </p><p>But, the pull request is more than just a notification—it’s a dedicated forum for discussing the proposed feature. If there are any problems with the changes, teammates can post feedback in the pull request.</p><h2 id="pull-request-anatomy"><a href="#pull-request-anatomy" class="headerlink" title="pull-request anatomy"></a>pull-request anatomy</h2><p>You will need to provide 4 pieces of information to file a pull request: </p><ol><li>the source repository, </li><li>the source branch, </li><li>the destination repository, </li><li>the destination branch.</li></ol><h1 id="Example-Process"><a href="#Example-Process" class="headerlink" title="Example Process"></a>Example Process</h1><p>Pull requests can be used in conjunction with the Feature Branch Workflow, the Gitflow Workflow, or the Forking Workflow. But a pull request requires either two distinct branches or two distinct repositories, so they will not work with the Centralized Workflow. </p><ol><li><p>A developer creates the feature in a dedicated branch in their local repo.</p></li><li><p>The developer pushes the branch to a public Bitbucket repository.</p></li><li><p>The developer files a pull request via Bitbucket.<br>The rest of the team reviews the code, discusses it, and alters it.</p></li><li><p>The project maintainer merges the feature into the official repository and closes the pull request.</p></li></ol><p>reference: <a href="https://www.atlassian.com/git/tutorials/making-a-pull-request" target="_blank" rel="noopener">Atlassian Tutorials on Git</a></p><h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><p><strong>git branch</strong> is a way to request a brand new working directory, staging area, and project history. </p><h2 id="Git-Vs-SVN"><a href="#Git-Vs-SVN" class="headerlink" title="Git Vs. SVN"></a>Git Vs. SVN</h2><p>Git branches is more lightweight than SVN’s. </p><p>Instead of <strong>copying files from directory to directory</strong>, Git stores a branch <strong>as a reference to a commit</strong>. In this sense, a branch represents the tip of a series of commits — not a container for commits. </p><h2 id="branch-basics"><a href="#branch-basics" class="headerlink" title="branch basics"></a>branch basics</h2><pre><code>git branch</code></pre><p>List all branches</p><pre><code>git branch &lt;branch&gt;</code></pre><p>Create a new branch called <branch> (but don’t checkout).</branch></p><pre><code>git checkout -b &lt;new-branch&gt;</code></pre><p>Create and check out <new-branch>. </new-branch></p><pre><code>git branch -d &lt;branch&gt;</code></pre><p>Delete the specified branch (safe).</p><pre><code>git branch -D &lt;branch&gt;</code></pre><p>Force delete the specified branch, even if it has unmerged changes. </p><pre><code>git branch -m &lt;branch&gt;</code></pre><p>Rename current branch to <branch>.</branch></p><h2 id="Detached-HEADs"><a href="#Detached-HEADs" class="headerlink" title="Detached HEADs"></a>Detached HEADs</h2><p>Remember that the HEAD is Git’s way of referring to the current snapshot. </p><p>Internally, <strong>git checkout</strong> command simply updates the HEAD to point to either the <strong>specified branch or commit</strong>.</p><p>When it points to a branch, Git doesn’t complain, but <strong>when you check out a commit</strong>, it switches into a “detached HEAD” state.</p><p>{<1>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen-Shot-2015-05-11-at-8-53-09-PM.png" alt=""></1></p><p>If you were to start developing a feature while in a detached HEAD state, there would be no branch allowing you to get back to it.</p><p>However, if you’re just looking at an old commit, it doesn’t really matter if you’re in a detached HEAD state or not.</p><h1 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h1><h2 id="merge-basics"><a href="#merge-basics" class="headerlink" title="merge basics"></a>merge basics</h2><pre><code>git merge &lt;branch&gt;</code></pre><p>Merge the branch into the current branch. </p><pre><code>git merge --no-ff &lt;branch&gt;</code></pre><p>Merge the branch into the current branch, but always generate a merge commit (even if it was a fast-forward merge).</p><h2 id="fast-forward"><a href="#fast-forward" class="headerlink" title="fast forward"></a>fast forward</h2><p>A fast-forward merge can occur when there is a linear path from the current branch tip to the target branch. </p><p>{<2>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen-Shot-2015-05-11-at-9-53-17-PM.png" alt=""></2></p><p>Instead of “actually” merging the branches, Git only moves the current branch tip up to the target branch tip. </p><h2 id="3-way-merge"><a href="#3-way-merge" class="headerlink" title="3-way merge"></a>3-way merge</h2><p>When there is not a linear path to the target branch, Git will do <strong>3-way merge</strong>. It use a dedicated commit to tie together the two histories. </p><p>{<3>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen-Shot-2015-05-11-at-9-57-48-PM.png" alt=""></3></p><p>Three commits are used to generate the merge commit: </p><ol><li>two branch tips</li><li>their common ancestor.</li></ol><h2 id="Conflicts"><a href="#Conflicts" class="headerlink" title="Conflicts"></a>Conflicts</h2><p>When both branches modify the same file, you’ll resolve the conflicts manually. After that, do a normal commit. </p><p>Note that merge conflicts will only occur in the event of a 3-way merge.</p><h2 id="Conventions"><a href="#Conventions" class="headerlink" title="Conventions"></a>Conventions</h2><p>While you can use either of these merge strategies, many developers like to use fast-forward merges (facilitated through rebasing) for <strong>small features</strong> or bug fixes, while reserving 3-way merges for the integration of <strong>longer-running features</strong>. </p><p>In the latter case, the resulting merge commit serves as a symbolic joining of the two branches.</p><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><p>3-way merge</p><pre><code># Start a new featuregit checkout -b new-feature master# Edit some filesgit add &lt;file&gt;git commit -m &quot;Start a feature&quot;# Edit some filesgit add &lt;file&gt;git commit -m &quot;Finish a feature&quot;# Develop the master branchgit checkout master# Edit some filesgit add &lt;file&gt;git commit -m &quot;Make some super-stable changes to master&quot;# Merge in the new-feature branchgit merge new-featuregit branch -d new-feature</code></pre><p>reference: <a href="https://www.atlassian.com/git/tutorials/using-branches" target="_blank" rel="noopener">Atlassian Tutorials on Git</a></p><h1 id="Git-workflows"><a href="#Git-workflows" class="headerlink" title="Git workflows"></a>Git workflows</h1><p>Remember this is guidelines rather than concrete rules. We’ll cover the first 3:</p><ol><li><p>Centralized Workflow</p></li><li><p>Feature Branch Workflow</p></li><li><p>Gitflow Workflow</p></li><li><p>Forking Workflow</p></li></ol><h1 id="Centralized-Workflow"><a href="#Centralized-Workflow" class="headerlink" title="Centralized Workflow"></a>Centralized Workflow</h1><ol><li><p>Each developer modify and commit into <strong>master branch</strong>.</p></li><li><p>After the change, <strong>fetch</strong> the updated central commits.</p></li><li><p><strong>rebase</strong> their changes.</p></li><li><p>If local changes directly conflict with upstream commits, Git will <strong>pause the rebasing</strong> and asks you to manually resolve the conflicts.</p></li></ol><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>Mary:</p><pre><code>git clone ssh://user@host/path/to/repo.gitgit status # View the state of the repogit add &lt;some-file&gt; # Stage a filegit commit # Commit a file&lt;/some-file&gt;git push origin master</code></pre><p>Bill:</p><pre><code>git push origin mastererror: failed to push some refs to &apos;/path/to/repo.git&apos;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. &apos;git pull&apos;)hint: before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</code></pre><p>Then, Bill would do:</p><pre><code>git pull --rebase origin masterCONFLICT (content): Merge conflict in &lt;some-file&gt;# Unmerged paths:# (use &quot;git reset HEAD &lt;some-file&gt;...&quot; to unstage)# (use &quot;git add/rm &lt;some-file&gt;...&quot; as appropriate to mark resolution)## both modified: &lt;some-file&gt;</code></pre><p>Bill solve some conflicts, then</p><pre><code>git add &lt;some-file&gt;git rebase --continue## after rebase successful,git push origin master</code></pre><h1 id="Feature-Branch-Workflow"><a href="#Feature-Branch-Workflow" class="headerlink" title="Feature Branch Workflow"></a>Feature Branch Workflow</h1><p>The core idea is that <strong>all feature development take place in a dedicated branch</strong> instead of the master branch. So that:</p><ol><li><p>a branch is a feature, having highly-focused purpose.</p></li><li><p>master branch will never contain broken code</p></li><li><p>possible to leverage <strong>pull requests</strong></p></li></ol><p>Note: Feature branches can and should be <strong>pushed to the central repository</strong>.</p><h2 id="pull-request"><a href="#pull-request" class="headerlink" title="pull request"></a>pull request</h2><p>Once someone completes a feature, they don’t immediately merge it into master.</p><p>Instead, they push feature branch to central server and <strong>file a pull request</strong>.</p><p>Code review shall happen here.</p><h2 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h2><p>Mary creates and checkout a branch if it doesn’t already exist (with -b):</p><pre><code>git checkout -b marys-feature master# edits, stages, and commits changesgit statusgit add &lt;some-file&gt;git commitgit push -u origin marys-feature</code></pre><p>-u is used to add it as a remote tracking branch. Now her feature is finished, she’ll do:</p><pre><code>git push</code></pre><p>Then a pull request.</p><p>After the code review, Mary still can work on this branch like she did before, or even Bill can pull marys-feature into his local repository and work on it. Until the pull request is accepted, either Mary or Bill do:</p><pre><code>git checkout mastergit pullgit pull origin marys-featuregit push</code></pre><p>{<1>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-05-15%20at%2011.18.54%20AM.png" alt=""></1></p><blockquote><p><strong>git pull origin marys-feature</strong> merges central repository’s copy of marys-feature to local master. (You could also use a simple <strong>git merge marys-feature</strong>, but the command shown above makes sure you’re always pulling the most up-to-date version of the feature branch.)</p></blockquote><blockquote><p>If you find it hard to understand, read <a href="http://superuser.com/a/163048" target="_blank" rel="noopener">Pull for another Git branch without switching, from superuser.com</a>:</p></blockquote><pre><code>git checkout livegit pull origin master</code></pre><blockquote><blockquote><p>This will attempt a merge of the remote master and your live branch.</p></blockquote></blockquote><h2 id="discussion-merge-vs-rebase"><a href="#discussion-merge-vs-rebase" class="headerlink" title="discussion: merge vs. rebase"></a>discussion: merge vs. rebase</h2><p>This process often results in a merge commit. Some developers like this because it’s like <strong>a symbolic joining of the feature</strong> with the rest of the code base. But, if you’re partial to a linear history, it’s possible to <strong>rebase the feature</strong> onto the tip of master before executing the merge, resulting in a fast-forward merge.</p><h1 id="Gitflow-Workflow"><a href="#Gitflow-Workflow" class="headerlink" title="Gitflow Workflow"></a>Gitflow Workflow</h1><p>Gitflow Workflow defines a <strong>strict branching model</strong> designed around the project release. It assigns <strong>very specific roles</strong> to different branches and defines how and when they should interact.</p><h2 id="master-and-develop"><a href="#master-and-develop" class="headerlink" title="master and develop"></a>master and develop</h2><p>The master branch stores the official release history, and the develop branch serves as an integration branch for features.</p><p><strong>Tag all commits</strong> in the master branch with <strong>a version number</strong>.</p><h2 id="feature-branches"><a href="#feature-branches" class="headerlink" title="feature branches"></a>feature branches</h2><p>Each new feature should reside in its own branch, which can be pushed to the central repository for backup/collaboration. But, instead of branching off of master, <strong>feature branches use develop as their parent branch</strong>.</p><blockquote><p>Note that feature branches combined with the develop branch is, for all intents and purposes, the <strong>Feature Branch Workflow</strong>.</p></blockquote><p>{<2>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-05-15%20at%204.19.16%20PM.png" alt=""></2></p><blockquote><p>branch off: develop</p><p>merge into: develop</p></blockquote><h2 id="release-branches"><a href="#release-branches" class="headerlink" title="release branches"></a>release branches</h2><p>For release, you fork a release branch off of develop, and prepare:</p><ol><li>bug fixes</li><li>documentation generation</li><li>other release-oriented tasks</li></ol><p><strong>No new features</strong> can be added after this point.</p><p>Once ready for release, this branch will get <strong>merged into master</strong> and tagged with a version number. In addition, it should be <strong>merged back into develop</strong>.</p><p>{<3>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-05-15%20at%204.27.35%20PM.png" alt=""></3></p><blockquote><p>branch off: develop</p><p>merge into: master, develop</p><p>naming convention: release-<em> or release/</em></p></blockquote><h2 id="hotfix-branches"><a href="#hotfix-branches" class="headerlink" title="hotfix branches"></a>hotfix branches</h2><p>Maintenance or “hotfix” branches are used to quickly patch production releases.</p><p>This is the only branch that should <strong>fork directly off of master</strong>.</p><p>Once fixed, it’s <strong>merged into both master and develop</strong> (or the current release branch), and master should be tagged with an updated version number.</p><p>You can think of maintenance branches as ad hoc release branches that work directly with master.</p><p>{<4>}<img src="https://dl.dropboxusercontent.com/u/23764314/ghost_immortalfish/Screen%20Shot%202015-05-15%20at%204.32.26%20PM.png" alt=""></4></p><blockquote><p>branch off: master</p><p>merge into: master, develop</p></blockquote><h2 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h2><h3 id="create-master-and-develop"><a href="#create-master-and-develop" class="headerlink" title="create master and develop"></a>create master and develop</h3><pre><code>git branch developgit push -u origin develop</code></pre><p><strong>develop</strong> will contain the complete history of the project, whereas <strong>master</strong> will contain an abridged version.</p><p>Bill now clone the central repository and create a tracking branch for develop:</p><pre><code>git clone ssh://user@host/path/to/repo.gitgit checkout -b develop origin/develop</code></pre><h3 id="develop-stage"><a href="#develop-stage" class="headerlink" title="develop stage"></a>develop stage</h3><p>Now Mary and Bill both work on their own features:</p><pre><code>git checkout -b some-feature develop# make changesgit statusgit add &lt;some-file&gt;git commit</code></pre><p>Once Mary finishes a feature, she can do a pull request, or this:</p><pre><code>git pull origin developgit checkout developgit merge some-featuregit pushgit branch -d some-feature</code></pre><h3 id="release-stage"><a href="#release-stage" class="headerlink" title="release stage"></a>release stage</h3><p>While Bill is still working on his feature, Mary starts to prepare the first official release</p><pre><code>git checkout -b release-0.1 develop</code></pre><p>She’ll clean up the release, test everything, update the documentation. Now the release is feature-frozen.</p><p>Once the release is ready, Mary merges it into master and develop, then deletes the release branch. (can also do pull request here)</p><pre><code>git checkout mastergit merge release-0.1git pushgit checkout developgit merge release-0.1git pushgit branch -d release-0.1</code></pre><p>When merging something into master, you should tag the commit for easy reference:</p><pre><code>git tag -a 0.1 -m &quot;Initial public release&quot; mastergit push --tags</code></pre><h3 id="maintenance-stage"><a href="#maintenance-stage" class="headerlink" title="maintenance stage"></a>maintenance stage</h3><p>If a bug is found:</p><pre><code>git checkout -b issue-#001 master# Fix the buggit checkout mastergit merge issue-#001git push</code></pre><p>Then include it in develop, and delete the branch:</p><pre><code>git checkout developgit merge issue-#001git pushgit branch -d issue-#001</code></pre><h1 id="Final-note-on-workflows"><a href="#Final-note-on-workflows" class="headerlink" title="Final note on workflows"></a>Final note on workflows</h1><p>They are not hard-and-fast rules for using Git in the workplace. So, don’t be afraid to adopt some aspects of a workflow and disregard others. The goal should always be to make Git work for you, not the other way around.</p><p>Reference: <a href="https://www.atlassian.com/git/tutorials/comparing-workflows" target="_blank" rel="noopener">Comparing Workflows by atlassian</a></p><h1 id="Forking"><a href="#Forking" class="headerlink" title="Forking"></a>Forking</h1><p>We have discussed about Centralized, Feature branch &amp; Gitflow in <a href="/git-workflows-feature-branch-gitflow-and-fork/">previous post</a>. </p><p>Now, Forking Workflow is <strong>fundamentally different</strong> than the other workflows. Instead of using a single server-side repository to act as the “central” codebase, it gives every developer a server-side repository. </p><p>Developers push to their own server-side repositories, and <strong>only the project maintainer</strong> can push to the official repository. </p><p>This allows the maintainer to <strong>accept commits</strong> from any developer without giving them write access to the official codebase.</p><p>This is an ideal workflow for open source projects.</p><h2 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h2><ol><li><p>developer fork the official repository to create a copy of it on the server.</p></li><li><p>no other developers are allowed to push to it, but they can pull changes from it</p></li><li><p>after he makes changes, he commits and push the commit to their own public repository - not the official one. Then, they file a pull request with the main repository.</p></li><li><p>maintainer pulls the contributor’s changes into their local repository, checks to make sure it doesn’t break the project, merges it into his local master branch, then pushes the master branch to the official repository </p></li></ol><h2 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h2><p>For a thorough example, read the ref link below. </p><p>Reference link: <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow" target="_blank" rel="noopener">Forking Workflow by atlassian.com</a></p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vi tutorial</title>
      <link href="/2015/04/24/Technology/vi-tutorial/"/>
      <url>/2015/04/24/Technology/vi-tutorial/</url>
      <content type="html"><![CDATA[<h1 id="About-Vi"><a href="#About-Vi" class="headerlink" title="About Vi"></a>About Vi</h1><p>Vi is a text editor built written in C, for Unit/Linux since 1976. It is default for Unix systems.</p><blockquote><p>Over the years since its creation, vi became the de facto standard Unix editor and a nearly undisputed hacker favorite[citation needed] outside of MIT until the rise of Emacs after about 1984.</p><p>– <cite>Wikipedia<a href="http://en.wikipedia.org/wiki/Vi" target="_blank" rel="noopener">1</a></cite></p></blockquote><h1 id="Why-Vi"><a href="#Why-Vi" class="headerlink" title="Why Vi"></a>Why Vi</h1><p>I have to use Vi when I setup my VPS for web hosting. Vi confuses me a while since I have no prior experience. Over time, I came to realize that using Vi is a must for a developer, so let’s don’t hesitate to jump at it!</p><p>We’ll get started by learning some of the basics.</p><h1 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h1><p>First of all, Vi have 2 modes: <strong>Command Mode</strong> and <strong>Insert Mode</strong>.</p><p>Remember how to switch mode:</p><ol><li>press ‘i’ for Insert Mode</li><li>press “Esc” for Command Mode</li></ol><h2 id="3-basic-file-commands"><a href="#3-basic-file-commands" class="headerlink" title="3 basic file commands"></a>3 basic file commands</h2><ol><li>:w - save</li><li>:q - quit</li><li>:q! - quit without saving</li></ol><h2 id="Move-the-cursor"><a href="#Move-the-cursor" class="headerlink" title="Move the cursor"></a>Move the cursor</h2><p>When in command mode, the key h, j, k and l can move the cursor, just like your arrow key.</p><ol><li>h - Cursor left</li><li>j - Cursor down</li><li>k - Cursor up</li><li>l - Cursor right</li></ol><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p>In command mode:</p><ol><li>x - delete 1 char</li><li>dd - delete 1 line</li></ol><p>Difference between ‘backspace’ and ‘x’:</p><ol><li>backspace - works in insert mode. Can only delete chars inserted in current session.</li><li>x - works in command mode. Can delete anything.</li></ol><h2 id="Repeat-operation"><a href="#Repeat-operation" class="headerlink" title="Repeat operation"></a>Repeat operation</h2><p>In command mode, input a number then the command, the command with be repeat corresponding number of times. Eg “20dd” deletes 20 lines.</p><h1 id="Last-word"><a href="#Last-word" class="headerlink" title="Last word"></a>Last word</h1><p>This definitely is not a thorough tutorial, but it’s enough for basic needs of a system admin. I learn these from the 2 tutorials from <a href="http://www.unix-manuals.com/tutorials/vi/vi-in-10-1.html" target="_blank" rel="noopener">unix-manuals</a></p><p>Hope it helps you.</p>]]></content>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【摘抄】信息不对称与公务员</title>
      <link href="/2014/09/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%AF%B9%E7%A7%B0%E4%B8%8E%E5%85%AC%E5%8A%A1%E5%91%98/"/>
      <url>/2014/09/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%AF%B9%E7%A7%B0%E4%B8%8E%E5%85%AC%E5%8A%A1%E5%91%98/</url>
      <content type="html"><![CDATA[<h1 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;&gt;"></a>&lt;<1984>&gt;</1984></h1><p>他想，他已经死了。他觉得只有到现在，当他开始能够把他的思想理出头绪的时候，他才采取了决定性的步骤。一切行动的后果都包括在行动本身里面。他写道：思想罪不会带来死亡：思想罪本身就是死亡。</p><h1 id="HK-China"><a href="#HK-China" class="headerlink" title="HK China"></a>HK China</h1><p>那时有关 中国对香港的国家主权体现 官方定义所发生的唯一一次大风波 是邓小平对从1997年6月30日午夜开始 中国军队是否在香港驻扎的问题公开发怒 整整30年之前 就在中英交接条约的最后文本敲定之际 邓小平当着所有被接见的记者们的面 怒斥两个领导人——黄华和耿飚 这两位已经表示解放军在港不驻军 以免影响国际社会对香港的信心 而邓小平在镜头前怒斥耿飊及黄华 指在香港不驻军是 胡说八道 这令在场的人大惊失色 更是令香港惊慌失措 英国也傻了眼</p><p><a href="http://www.ftchinese.com/story/00105795" target="_blank" rel="noopener">http://www.ftchinese.com/story/00105795</a></p><h1 id="公务员-信息不对称"><a href="#公务员-信息不对称" class="headerlink" title="公务员 信息不对称"></a>公务员 信息不对称</h1><p>为什么那个村里中学还没毕业就出去闯荡的狗蛋，十几年后衣锦还乡，开着李华看一辈子报纸喝一辈子茶水，拿一辈子hui色收入都买不起的某订制级豪车，乡亲们一瞬间忘记了那个从小到大奖状贴了一墙的尖子生李华，之前对李华考上公务员的种种夸耀，恨不能全部收回来，贴在狗蛋身上，而李华只能望着绝尘而去，怀疑这一生？</p><p>村民甚至分不清楚公务员的概念，想当然地以为，当官=公务员=有钱。而在这种理解程度上，不管李华当的是村支书，还是一个比较新潮的公务员，比如可以是市妇联主任的助手，或者是海关安检看X光扫描的小兵，在村民对于这种没有对公务员的判定范围有一个清楚的了解下，那他们听了后，会摆出”O“的嘴型与我懂得的表情，然后笑嘻嘻地说：”当官好啊。“</p><p>在狗蛋没回来之前，李华拥有对公务员信息解释的垄断权。<br>显而易见，李华信息量要大于村民。<br><strong>这就是一种信息不对称</strong>。</p><p>李华认为自己是成功，还是失败，这都不重要，<strong>重要的是，他在极力维持这种信息不对称，无论是出于什么目的</strong>。但是，不幸的是，狗蛋的出现，打破了这种信息不对称</p><p>狗蛋从最直观的角度，满足了村民心底原始级欲望（此处为金钱），以一个胜利者（信息不对称破坏者）的姿态，打破了李华对于成功定义的垄断。在狗蛋没回来之前，大家都认为，从这小山沟沟里走出去，并能混出个样样，取得成功唯一的途径便是像李华那样用功读书，将来成为一个官（公务员）。 </p><p>而走出这个山沟，对成功的理解则不一样。<strong>这，正是一种信息不对称</strong>。</p><p>既然发觉到信息不对称，并有可以逆转这种不对称，甚至有可以打破不对称规则的机会，为什么人们就是不做？</p><p>答案很简单：自我否定与，对短期收益的认可，大过了长期收益的认可。</p><p>因为功利心在作祟，使我们丧失了对于一件事物基本的思辨能力，以至于，哪怕这件事只要坚持下来，并长期去做，就会获得巨大收益，但仅仅因为其需求一定量的时间付出，便放弃了这件事。</p><p><a href="http://www.zhihu.com/question/24709876/answer/28701787" target="_blank" rel="noopener">http://www.zhihu.com/question/24709876/answer/28701787</a></p><h1 id="中国护照bug"><a href="#中国护照bug" class="headerlink" title="中国护照bug"></a>中国护照bug</h1><p>国内很多敏感人物可以避过bug通行全球，同时保留多国籍。这些敏感人物人手两/多个护照，一个中国的一个圣基茨及尼维斯的再加上一个深圳户口，因为深圳户口有香港“一签多行”的功能，他们先利用港澳通行证到香港，再用第二本护照合法离境，返回时仍然用港澳通行证从香港入境。巧妙地避过了出入境记录的bug，既不用办签证也避免了被国内政府发现第二国籍。</p><p>国内的出入境处只知道他们出入了香港，并不知道他们在香港还去了别的国家，从而避免被注销国籍。 </p>]]></content>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【读书笔记】明朝那些事2</title>
      <link href="/2014/08/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B2/"/>
      <url>/2014/08/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B2/</url>
      <content type="html"><![CDATA[<h1 id="汤和"><a href="#汤和" class="headerlink" title="汤和"></a>汤和</h1><p>汤和就这样成了朱重八的第一个战友。他在今后的日子里将陪同朱重八一起走完这条艰苦的道路。然而汤和也绝对不会想到，自己居然是唯一一个陪他走完这条路的人。</p><p>他幼年时候的朋友汤和写了一封信给他，信的内容是自己做了起义军的千户，希望朱重八也来参加起义军，共图富贵。朱重八看过后，不动声色，将信烧掉了。然而晚上，他的师兄告诉他，有人已经知道了他看义军信件的事情，准备去告发他。朱重八终于被逼上了绝路。</p><h1 id="徐达"><a href="#徐达" class="headerlink" title="徐达"></a>徐达</h1><p>徐达是明朝的优秀将领，他平民出身，却是不世出的军事天才，他从小兵干起，跟随朱元璋出生入死，在残酷的战争中成长为元末明初最优秀的将领。</p><p>他善于指挥大军团作战，深通谋略，为人宽厚，历数十役，战必胜、攻必取，与北元第一名将王保保的作战更是他军事生涯的最高峰。他告诉我们，一个平凡的人经过自己的努力，也能成为叱咤风云的名将。</p><h1 id="李善长"><a href="#李善长" class="headerlink" title="李善长"></a>李善长</h1><p>念及李善长跟随自己多年，在临刑前朱元璋见了李善长最后一面。朱元璋坐在自己的宝座上，看着跪在下面的李善长。这个人曾经是我最信任的部下，现在我要杀他。</p><p>李善长跪在地上，抬头望着朱元璋。这个人曾经是我最真诚的朋友，现在他要杀我。</p><p>还能说什么呢，什么都不用说了。李善长看着朱元璋，几十年前，他投奔了这个人，他们彻夜长谈，相见恨晚，共同谋划着将来的远大前景。那一年，李善长四十岁，朱元璋二十六岁。他向现在的皇帝朱元璋叩头谢恩，走出了大殿。</p><p>洪武二十三年（1390），朱元璋杀李善长，夷其三族。</p><h1 id="大诰"><a href="#大诰" class="headerlink" title="大诰"></a>大诰</h1><p>比如张三犯了罪，应该处以刑罚，县官已经定罪，下一步本来应该是该坐牢的去坐牢、该流放的流放，但差役却不忙，他们还要办一件事，那就是把张三押到他自己的家中，去找一样东西。找什么呢？就是这本《大诰》，如果找到了，那就恭喜张三了：如果本来判的流放，就不用去了，回牢房坐牢；如果是杀头的罪，那就能捡一条命。</p><p>(明朝末年时，如果有人家还保存有大诰，那么在犯流罪以下罪行时可以减轻一等处罚。)</p><h1 id="严格的秩序"><a href="#严格的秩序" class="headerlink" title="严格的秩序"></a>严格的秩序</h1><p>朱元璋要建立的是一个等级分明、秩序严谨、近乎僵化的社会结构，在这个结构中，农民只能种地，商人只能经商，官员按照规定干好自己的工作，无论谁都不能越界。军户、民户、匠户的划分。。。</p><p>The consequences: </p><p>朱元璋废除了丞相制度，限制大臣的权力，然而明朝的内阁比以往的任何丞相都更专权。朱元璋规定老百姓不得四处流动，然而明朝中后期流民成风，四处游荡，丝毫不受束缚。</p><p>朱元璋颁布了抑制商业发展的条令，并规定商人不得穿着绸纱等贵重衣物，然而大规模的工商业发展正是从明朝开始，而那些本应该是社会最底层的商人却穿金戴银，甚至登堂入室，为官经商。</p><p>朱元璋严令太监不得干政，可是明朝的阉宦却个个都是重量级的（这与他废除相权有关）。朱元璋给他的所有子孙都准备了爵位和俸禄，然而一百多年后，他的很多后代都家道中落，穷困潦倒。</p><h1 id="屠城"><a href="#屠城" class="headerlink" title="屠城"></a>屠城</h1><p>屠城是为了让对手屈服。但他们的缺德之处在于，不投降他们必然会屠城，但是投降的他们也并不放过。</p><p>蒙古的狂潮席卷全球，不过欧洲人似乎更有自律精神，他们认为无端出来这么些恐怖的家伙，是因为自己犯的错太多，上帝用鞭子来教训自己，所以他们称呼蒙古人为“上帝之鞭”。</p><p>这一荣誉称号的授予在欧洲历史上是第二次，第一次是给了匈奴王阿提拉。历史学家们给了蒙古军队的这种屠杀行为一个非常确切的定义——国家恐怖主义。</p><h1 id="行为艺术，和屠杀数据"><a href="#行为艺术，和屠杀数据" class="headerlink" title="行为艺术，和屠杀数据"></a>行为艺术，和屠杀数据</h1><p>西亚战役中，将被杀死的人脑袋砍下来，堆成一座三角形山。</p><p>此外他们也是颇有些黑色幽默感的，比如在攻克巴格达后，他们将最高领袖哈里发关在一座装满金银珠宝的房子里，让他活活饿死。</p><p>蒙古攻灭金国时 金全盛时（1207）有户768万，元灭金时（1235）剩下87万户，下降89%   </p><p>蒙古灭南宋时 南宋嘉定十六年（1223）有户1267万，元灭宋时剩下937万，下降26% （这么看来，蒙古对南宋还是相当宽大的）</p>]]></content>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【读书笔记】明朝那些事1</title>
      <link href="/2014/07/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B1/"/>
      <url>/2014/07/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B1/</url>
      <content type="html"><![CDATA[<h1 id="书生和文天祥"><a href="#书生和文天祥" class="headerlink" title="书生和文天祥"></a>书生和文天祥</h1><p>张子明连声答应，走到城下，大声喊道：“请大家坚守下去，我们的大军马上就到了！”陈友谅傻眼了，他没有想到这个柔弱的读书人有这样的胆量，气急败坏，拿刀杀了张子明。他这才明白，这个书生并不怕死，只是他的使命没有完成，他还不能死。他还一直记得张子明临死前那嘲弄的眼神。更让他不安的是，从他的将领们的眼神中，看到的是对这个读书人的敬佩。这些杀人不眨眼的家伙居然会佩服这个人？</p><p>其实答案就藏在文天祥的衣带中，这也是他的遗书。孔曰成仁，孟曰取义。惟其义尽</p><h1 id="连中三元"><a href="#连中三元" class="headerlink" title="连中三元"></a>连中三元</h1><p>具体说来就是身兼解元、会元、状元三个称号于一身。这是真正的高难度动作，必须保证全省考第一，然后在会试中全国考第一，最后殿试里在皇帝心目中也是第一。这就要求考生光是学问好还不够，必须反应快，长得比较帅</p><h1 id="生如夏花"><a href="#生如夏花" class="headerlink" title="生如夏花"></a>生如夏花</h1><p>生如夏花，逝如冬雪；人生如此，何悔何怨。</p><h1 id="剥皮和贪污"><a href="#剥皮和贪污" class="headerlink" title="剥皮和贪污"></a>剥皮和贪污</h1><p>县衙有大门、戒石、鼓楼、二门这些结构，但在明朝却在大门和二门之间多设置了一个土地祠。此土地祠切不可晚上去看，着实吓人….这个地方是剥皮用的，剥的就是人皮。朱元璋命令官员贪污处死后，皮剥下来…用来威慑贪官的。</p><p>（朱亮祖，明朝初年开国功臣。镇守广东时，与当地豪强勾结，朱元璋察觉后，将朱亮祖及其长子朱暹鞭挞至死，以侯礼葬。）参与此事的恶霸全部杀死,皮都被剥了下来，悬挂在闹市，供众人参观，以为后世警诫。</p><p>自明朝开国以后，贪污不断，朱元璋杀不尽杀，据统计，因贪污受贿被杀死的官员有几万人，到洪武十九年（1386），全国十三个省从府到县的官员很少能够做到满任，大部分都被杀掉了。</p><p>于是在当时的史料中出现了这样一个滑稽的记录：该年同批发榜派官364人，皆为进士监生，一年后，杀6人。戴死罪、徒流罪办事者358人。</p><h1 id="空印案"><a href="#空印案" class="headerlink" title="空印案"></a>空印案</h1><p>洪武四大案中的空印案和郭桓案。</p><p>几乎全国所有的府县都存在空印现象，总不能把所有的府县官员都杀掉吧。这又是一个难题，但在朱元璋那里，似乎没有他解不开的题目。他总能做出别人想不到的事情，旁人认为他绝不可能把涉案的所有官员都杀掉，但他真的就这样做了。处罚如下：主印官员全部杀掉，副手打一百杖充军。除此之外，连各省按察使司的言官也多有获罪者，理由是监管不力。</p><h1 id="郭桓案"><a href="#郭桓案" class="headerlink" title="郭桓案"></a>郭桓案</h1><p>郭桓确实是胆大妄为，他勾结其他官吏贪污腐败。朱元璋也并没有放过他的同党。那么郭桓的同党是谁呢？经过朱元璋的追查，六部的大多数官员都成为了郭桓的同党！当时的六部，每个部除了尚书（部长）一人、侍郎（副部长）两人（上文已列出者除外），所有的办事官员都被杀掉了。当时的部长真的成了光杆司令。官员们陷入了恐惧之中，见面的第一句话应该就是：“你们今天死了几个？</p><p>此案一共杀掉了三万余人</p><h1 id="装疯"><a href="#装疯" class="headerlink" title="装疯"></a>装疯</h1><p>史料记载，官员们每天上朝，都要在家门口举行仪式，什么仪式呢？穿戴整齐，抱抱老婆孩子，交代清楚谁还欠我多少债、我的私房钱藏在床底之类的后事。老婆孩子就在背后哭，除了人还是活的，和开追悼会没什么区别。散朝的时候，老婆孩子在家门口等着，如果看到活人回家，就会大事庆祝一番，庆祝的内容是今天我又活了一天。</p><p>很多官员承受不住，纷纷表示自己就当白读了几十年书，情愿回家种地。明朝的官员们在这个矛盾上充分体现出了这一特点。他们想出了一个很绝的方法——装疯。</p>]]></content>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>墨菲定理</title>
      <link href="/2012/02/15/%E5%A2%A8%E8%8F%B2%E5%AE%9A%E7%90%86/"/>
      <url>/2012/02/15/%E5%A2%A8%E8%8F%B2%E5%AE%9A%E7%90%86/</url>
      <content type="html"><![CDATA[<p>鸡尾酒效应 听到你的名字，sex，你不断监听，知道之前的字</p><p>第六感和鸡尾酒会一个道理，监听</p><p>蓝色大众轿车效应 • 你觉得没有人开蓝色大众轿车，但一旦开着蓝色大众轿车上路，才发现满世界都是蓝色大众轿车。</p><p>阿基米德认为，视觉是一个积极而不是被动的过程。不是光线打入我们眼睛，而是我们的眼睛像发出的光束一样搜寻区域。我们找一本书时，其实寻找的是大脑中的匹配，而不是书本身。</p><p>人脑中心的杏仁核，是情感中心，特别是储存恐惧。这是和日常记忆不同的区域，只有特殊情况下才会动用。不过在药物的作用下，人可以回忆起40年前的歌曲，笑话。</p><p>缺失的记忆让情感变得更为丰富。。。我们需要新的颜色来填补，以恢复模糊的图像。但是这往往是很主观的。</p><p>广告的原理是“超常刺激” - 人们喜欢外表华丽的设备而忘记运营成本，海鸥的窝里多出一个假蛋，即使大的出奇，它仍会精心照料。</p><p>广告定律 – 避免具体承诺，培养出讨人喜欢的含糊。</p><p>Marconi, known as the father of long distance radio transmission, 后来被证明他首次实验时并没听到传输的信号，只是他认为听到了而已。不过他的无线电信号理论碰巧是正确的。</p><p>火星并不是红色的，是人们希望看到红色，灰色会无味。所以我们看到的其实是处理过的火星照片。</p><p>因为热 使用风扇，但用电使得更多二氧化碳排放，从而更热。</p><p>压力下的上班族用的手势源于黑猩猩，夸张地笑~撕咬 抬手~挥舞棍棒 摔笔~把树连根拔起</p><p>每个员工都晋升到他们不胜任的职位上。。。。一旦干得好，就会升职。干得不好了才会停止升职。</p><p>Mike Rowe先生注册的软件公司侵犯了Microsoft 的版权。。。好莱坞拍摄电影的老鼠仔细检查，因为不可以跟米老鼠相像。。。</p><p>Apple Corp(owned by Beatles) vs. Apple Computers, make the sound into Sosumi (so sue me).</p><p>我热爱人类，但我无法容忍身边这个人。</p><p>吸烟的人会买彩票，他们想，中奖的机会是1400万分之一，可能是我。但是他们同时也在想，吸烟患肺癌的机会是1000分之一，不会是我。</p><p>为什么自古红颜多薄命，不是因为漂亮女孩命短，而是因为她的所有幸福建立在短暂的美丽上，但是这个过程太多短暂。</p><p>1001夜的故事 —— 不管多美貌的妃子，自信自己能驾驭皇帝，最终都在睡了一晚之后，无一例外地被杀死了。只有一个宰相的女儿，她决定去试一下。所以她每天去将一个故事，但是不讲完，直到1001夜的时候，皇帝选择跟她在一起。<br>2个道理：第一，如果想驾驭权势和金钱，你要准备好牺牲自己。第二，走到最后的女孩子，不是最漂亮的，而是最有故事的女孩子。</p><p>我在他眼神中看到一种我特别不愿看到的东西，就是落寞。我觉得他是一个特别孤单的人，他为什么去看书，因为人都是一本书。身边这本书并不是他想读的那本。。。。。他只是很孤独，他正在寻找一个群体。。。你应该继续读下去，直到有一天，你遇到一些人，他们橡书一样带给你你想要得到的东西。</p><p>如果世间只剩两张清朝大龙邮票，各值十万，善贾者必然撕毁一张，另一张不是两枚之和的二十万，而可能是三十万、四十万，因为它的惟一性。</p><p>Life is not measured by the number of breaths we take, but by the moments that take our breath away.</p><p>If you were in a room full of smart people, would you ask the same person to explain something to you over and over again, or would you ask lots of people?<br>The result is - learning becomes less tedious.</p><p>你参加一个现场节目，主持人给了你一个中奖的机会。在三扇门背后，只有一扇门后有大奖。你选了1号门。然后，狡诈的主持人打开了3号门，显示门背后没有奖品。然后他对你说，“我再给你一个机会，你可以更改你的选择。”</p><p>Ans: change your selection, because one of the wrong answer have been eliminated from the 2, Change selection and have a possibility of 66% of winning.</p><p>Let say 1, 2, 3. Only 1 got prize.<br>select 1 initially, then change =&gt; loose<br>select 2 initially, then change =&gt; win<br>select 3 initially, then change =&gt; win</p><p>===============割一下=======================</p><p>青蛙现象：把一只青蛙直接放进热水锅里，由于它对不良环境的反应十分敏感，就会迅速跳出锅外。如果把一个青蛙放进冷水 锅里，慢慢地加温，青蛙并不会立即跳出锅外，水温逐渐提高的最终结局是青蛙被煮死了，因为等水温高到青蛙无法忍受时，它已经来不及、或者说是没有能力跳出 锅外了。　青蛙现象告诉我们，一些突变事件，往往容易引起人们的警觉，而易致人于死地的却是在自我感觉良好的情况下，对实际情况的逐渐恶化，没有清醒的察觉。</p><p>羊群效应：头羊往哪里走，后面的羊就跟着往哪里走。  羊群效应最早是股票投资中的一个术语，主要是指投资者在交易过程中存在学习与模仿现象，“有样学样”，盲目效仿别人，从而导致他们在某段时期内买卖相同的股票。</p><p>手表定律：手表定律是指一个人有一只表时，可以知道现在是几点钟，而当他同时拥有两只时却无法确定。两只表并不能告诉一个人更准确的时间，反而会使看表的人失去对准确时间的信心。     手表定律在企业管理方面给我们一种非常直观的启发，就是对同一个人或同一个组织不能同时采用两种不同的方法，不能同时设置两个不同的目标，甚至每一个人不能由两个人来同时指挥，否则将使这个企业或者个人无所适从。</p><p>二八定律(巴莱多定律)：19世纪末20世纪初意大利的经济学家巴莱多认为，在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管是多数，却是次要的。社会约80%的财富集中在20%的人手里，而80%的人只拥有20%的社会财富。这种统计的不平衡性在社会、经济及生活中无处不在，这就是二八法则。    二八法则告诉我们，不要平均地分析、处理和看待问题，企业经营和管理中要抓住关键的少数;要找出那些能给企业带来80%利润、总量却仅占20%的关键客户，加强服务，达到事半功倍的效果;企业领导人要对工作认真分类分析，要把主要精力花在解决主要问题、抓主要项目上。</p><p>(考试尤其是这样！！！)</p><p>责任分散效应</p><p>　　1964年3月13日夜3时20分，在美国纽约郊外某公寓前，一位叫朱诺比白的年轻女子在结束酒巴间工作回家的路上遇刺。当她绝望地喊叫：“有人要杀人啦!救命!救命!” 听到喊叫声，附近住户亮起了灯，打开了窗户，凶手吓跑了。当一切恢复平静后，凶手又返回作案。当她又叫喊时，附近的住户又打开了电灯，凶手又逃跑了。当她 认为已经无事，回到自己家上楼时，凶手又一次出现在她面前，将她杀死在楼梯上。在这个过程中，尽管她大声呼救，她的邻居中至少有38位到窗前观看，但无一人来救她，甚至无一人打电话报警。这件事引起纽约社会的轰动，也引起了社会心理学工作者的重视和思考。人们把这种众多的旁观者见死不救的现象称为责任分散效应。</p><p>　 　对于责任分散效应形成的原因，心理学家进行了大量的实验和调查，结果发现：这种现象不能仅仅说是众人的冷酷无情，或道德日益沦丧的表现。因为在不同的场 合，人们的援助行为确实是不同的。当一个人遇到紧急情境时，如果只有他一个人能提供帮助，他会清醒地意识到自己的责任，对受难者给予帮助。如果他见死不救 会产生罪恶感、内疚感，这需要付出很高的心理代价。而如果有许多人在场的话，帮助求助者的责任就由大家来分担，造成责任分散，每个人分担的责任很少，旁观 者甚至可能连他自己的那一份责任也意识不到，从而产生一种“我不去救，由别人去救”的心理，造成“集体冷漠”的局面。如何打破这种局面，这是心理学家正在 研究的一个重要课题。</p><p>（小悦悦事件）</p><p>Have the courage to change the things which can and ought to be changed, the serenity accept things which cannot be changed and the wisdom to know the difference</p>]]></content>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Intro to Hexo</title>
      <link href="/2001/01/01/intro-to-hexo/"/>
      <url>/2001/01/01/intro-to-hexo/</url>
      <content type="html"><![CDATA[<p>This is an introduction to Hexo blogging framework, used for self references.</p><h1 id="First-word"><a href="#First-word" class="headerlink" title="First word"></a>First word</h1><h2 id="Public-repo-and-master-branch"><a href="#Public-repo-and-master-branch" class="headerlink" title="Public repo and master branch"></a>Public repo and master branch</h2><p>For GitHub pages deployment, you have to push the <strong>public folder</strong> of Hexo to the <strong>master branch</strong> of “yourname.github.io” repo in your GitHub account. </p><p>Make sure the repo name is correct. And “yourname” must match the GitHub account name. </p><p>After “hexo deploy”, the changes should be reflected within 5 seconds.</p><h2 id="Config-the-git-URL"><a href="#Config-the-git-URL" class="headerlink" title="Config the git URL"></a>Config the git URL</h2><p>Now edit your _config.yml</p><p>You must put in the git SSH url in config file.</p><h1 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h1><pre><code>hexo init yourname.github.iocd npm installhexo servernpm install hexo-deployer-git --savevi _config.ymlhexo generate --watchhexo deploy</code></pre><p>Specifically, after you update a post, run the following:</p><pre><code>hexo ghexo dOrhexo s</code></pre><p><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="noopener">https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39</a></p><h2 id="Handle-Images"><a href="#Handle-Images" class="headerlink" title="Handle Images"></a>Handle Images</h2><p>Put all your images in “source/images” folder. Put all markdown file in “source/_posts” folder. Then your image insertion sync looks like this:</p><pre><code>![](/images/e7a396ad9c53636766c6d89aa840f60d.jpg)</code></pre><p>Look like this: <img src="/images/e7a396ad9c53636766c6d89aa840f60d.jpg" alt=""></p><h2 id="Apply-themes"><a href="#Apply-themes" class="headerlink" title="Apply themes"></a>Apply themes</h2><p>Pick a theme online, for example this one: <a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">https://github.com/stkevintan/hexo-theme-material-flow</a></p><p>Then run the following:</p><pre><code>cd /your_blog_dir/# install dependenciesnpm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content# download sourcegit clone https://github.com/stkevintan/hexo-theme-material-flow themes/material-flow</code></pre><p>Lastly, change the value of theme to material-flow in _config.yml</p><p>Note:</p><p>  If you do not have correct theme setup, you will see black page.<br>  The ‘hexo g’ command would have error: No layout: index.html</p><h2 id="Hexo-commands-abbreviation"><a href="#Hexo-commands-abbreviation" class="headerlink" title="Hexo commands abbreviation"></a>Hexo commands abbreviation</h2><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre>]]></content>
      
      
    </entry>
    
  
  
</search>
